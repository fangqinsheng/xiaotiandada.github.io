<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[React案列]]></title>
    <url>%2F2018%2F11%2F23%2FReact%E6%A1%88%E5%88%97%2F</url>
    <content type="text"><![CDATA[React案列React 做的小案列 记录学习笔记什么的~ 仓库地址 博客地址 学习资料-reactjs 学习资料-imooc React案列一简易版-todoList1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import React, &#123; Component &#125; from "react";// import logo from "./logo.svg";import "./App.css";class App extends Component &#123; // 状态 constructor(props)&#123; super(props) this.state = &#123; list: [], // 列表数据 inputValue: '' // 输入框数据 &#125; &#125; // 添加列表数据 addList()&#123; // es6 语法 this.setState(&#123; list: [...this.state.list, this.state.inputValue], inputValue: '' &#125;) &#125; // 改变inputValue changeInput(e) &#123; // 目标值 let value = e.target.value this.setState(&#123; inputValue: value, &#125;) &#125; // 删除列表数据 delList(index) &#123; // 拷贝值 删除 let list = [...this.state.list] list.splice(index, 1) this.setState(&#123; list &#125;) &#125; render() &#123; return ( &lt;div&gt; &lt;div&gt; // 数据绑定 改变事件绑定this &lt;input value=&#123;this.state.inputValue&#125; onChange=&#123;this.changeInput.bind(this)&#125; type="text"/&gt; // 添加事件 绑定this &lt;button onClick=&#123;this.addList.bind(this)&#125;&gt;添加&lt;/button&gt; &lt;/div&gt; &lt;ul&gt; &#123; this.state.list.map((item,index) =&gt; &#123; return ( // 删除事件 绑定this 传index &lt;li key=&#123;index&#125; onClick=&#123;this.delList.bind(this, index)&#125;&gt;&#123;item&#125;&lt;/li&gt; ) &#125;) &#125; &lt;/ul&gt; &lt;/div&gt; ); &#125;&#125;export default App; 事件，需要state里面的值需要绑定this 1onClick=&#123;this.delList.bind(this, index)&#125; 改变state 需要用 this.setState 1this.setState(&#123;&#125;) input 双向绑定数据 不用改变事件 输入框内容不会改变 并且警告报错 12345678910// 改变inputValuechangeInput(e) &#123; // 目标值 let value = e.target.value this.setState(&#123; inputValue: value, &#125;)&#125;&lt;input value=&#123;this.state.inputValue&#125; onChange=&#123;this.changeInput.bind(this)&#125; type="text"/&gt; 刚刚搜了一下 参考文章 react中实现数据双向绑定 Qq：952822399 Qq群 iD 718639024 大家也可以进来互相交流~ 最后就是厚脸皮的一步(觉得不错可以点个star哦~~~) 仓库地址 同时也欢迎Pr！！！ 同时也欢迎Pr！！！ 同时也欢迎Pr！！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[electron-vu打造低配版网易云(Mv版)]]></title>
    <url>%2F2018%2F10%2F03%2Felectron-vu%E6%89%93%E9%80%A0%E4%BD%8E%E9%85%8D%E7%89%88%E7%BD%91%E6%98%93%E4%BA%91-Mv%E7%89%88%2F</url>
    <content type="text"><![CDATA[前言仓库地址 想体验一下写桌面程序，所以使用electron,然后为了快速开发 选择了electron-vue. 找了一些Api 最后发现还是网易云的Api比较好使，然后很多大佬写了网易云音乐了，所以我就走一波歪路~~ 最后就是开干，上键盘一梭哈(尽量少写文字，节省大家阅读时间)。 技术栈 核心用到的东西 electron-vueelectron-vue - 基于 vue (基本上是它听起来的样子) 来构造 electron 应用程序的样板代码。 elementelement - Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库. axiosaxios - 基于Promise的HTTP客户端，用于浏览器和node.js(Google 自动翻译，这个大家都懂). vue-dplayervue-dplayer - 基于DPlayer的Vue 2.x视频播放器组件. Api网易云音乐Node.js API服务 - 网易云音乐Node.js API服务(我是部署在自己服务器上面了). 界面展示 界面很简单，展示Mv然后可以播放，评论会以弹幕的形式显示出来 (弹幕处理得不太好，而且写了很久才写了这么点界面 哎o(︶︿︶)o 唉). 完成进度 基本页面展示 自定义状态栏 支持放大、缩小、关闭 播放Mv 请求点击的Mv然后播放视频 显示弹幕 评论转换弹幕显示 切换页面 上一页、下一页、首页、尾页 弹幕处理的不好 没有性能优化 没有分离组件 打包没有处理icon(懒~~) 忘记了…娱乐项目 没有注意很多 随缘随缘 技术实现 技术实现过程和一些踩过的坑 自定义状态栏因为win自带的状态栏太丑了，所以自己模拟了一个，electron-vue 通过 ipcMain 发送消息 ipcMain - 从主进程到渲染进程的异步通信。 ipcMain模块是EventEmitter类的一个实例。 当在主进程中使用时，它处理从渲染器进程（网页）发送出来的异步和同步信息。 从渲染器进程发送的消息将被发送到该模块。 – copy c &amp; v 参考文章 在 index.js 修改窗口大小. BrowserWindow - 创建和控制浏览器窗口。 里面的参数自己可以看文档哦~ 1234567mainWindow = new BrowserWindow(&#123; height: 710, width: 1200, useContentSize: true, frame: false &#125;) 设置之后，有一个细节需要了解一下. 可拖拽区 - 默认情况下, 无框窗口是 non-draggable 的….. (总之就是，你需要设置一下) 要使整个窗口可拖拽, 您可以添加 -webkit-app-region: drag 作为 body 的样式:1&lt;body style="-webkit-app-region: drag"&gt;&lt;/body&gt; 请注意, 如果您已使整个窗口draggable, 则必须将按钮标记为 non-draggable, 否则用户将无法单击它们: 123button &#123; -webkit-app-region: no-drag;&#125; 如果你设置自定义标题栏为 draggable, 你也需要标题栏中所有的按钮都设为 non-draggable。 详情可以看文档呢。 模拟事件 参考文章里面有介绍到，流程大概就是这样。 1234567891011121314151617181920212223242526272829303132// 引入const &#123;ipcRenderer: ipc&#125; = require('electron')// 自定义事件winMin () &#123; ipc.send('window-min')&#125;,winEnlargeOrNarrow () &#123; ipc.send('win-enlarge-or-narrow')&#125;,winClose () &#123; ipc.send('window-close')&#125;/** * 模拟 最小 放大 还原 关闭 事件 * index.js 修改 */ipcMain.on('window-min', () =&gt; &#123; mainWindow.minimize()&#125;)ipcMain.on('win-enlarge-or-narrow', () =&gt; &#123; if (mainWindow.isMaximized()) &#123; mainWindow.unmaximize() &#125; else &#123; mainWindow.maximize() &#125;&#125;)ipcMain.on('window-close', () =&gt; &#123; mainWindow.close()&#125;) 不想写的话，可以复制粘贴我的一梭哈. 评论转弹幕播放器提供了相应的接口，只需要获取评论转换相应的数据就可以了。 1234567transformComments (commentsArr) &#123;&#125;dp.danmaku.draw(&#123; text: 'DIYgod is amazing', color: '#fff', type: 'top'&#125;); 源码地址 其他 封装方法 1234567891011121314151617181920212223242526272829import axios from 'axios'export default () =&gt; &#123; return axios.create(&#123; baseURL: 'http://123.207.60.132:3000', timeout: 1000 &#125;)&#125;-----------------import Api from './Api'export default &#123; /** * 默认30条数据，可以自定义 * @param limit * @returns &#123;*&#125; */ getTopMv (limit = 30, offset = 0) &#123; return Api().get(`/top/mv?limit=$&#123;limit&#125;&amp;offset=$&#123;offset&#125;`) &#125;, getMvId (id) &#123; return Api().get(`/mv?mvid=$&#123;id&#125;`) &#125;, getMvComments (id) &#123; return Api().get(`/comment/mv?id=$&#123;id&#125;`) &#125;&#125; 有的懒得打注释了， 不懂得可以问我哦 有更优化的方法也可以滴滴我 总结因为纯粹是为了体验，所以没写很多功能(不要干死我hhhhh) 如果阅读中，有什么不明白的 可以问我，也可以去群里交流 Qq：952822399 Qq群 iD 718639024 大家也可以进来互相交流~ 最后就是厚脸皮的一步(觉得不错可以点个star哦~~~) 仓库地址 同时也欢迎Pr 帮我修复不正确的地方！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[parallax.js-制作炫酷的视觉差特效]]></title>
    <url>%2F2018%2F09%2F16%2Fparallax.js-%E5%88%B6%E4%BD%9C%E7%82%AB%E9%85%B7%E7%9A%84%E8%A7%86%E8%A7%89%E5%B7%AE%E7%89%B9%E6%95%88%2F</url>
    <content type="text"><![CDATA[前言利用 Parallax.js 制作炫酷的视觉差特效. 主角 Parallax。jsParallax.js 是一款功能非常强大的 JavaScript 视觉差特效引擎插件。通过这个视觉差插件可以制作出非常炫酷的视觉差特效，可以检测智能设备的方向。 官方demo and 截图我叫demo 可以点进去 效果很酷~~~ 实现引入使用cdn，或者下载文件都可以,如果你需要其他引入方法，你可以参考官方文档。 文档 1&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/parallax/3.1.0/parallax.min.js"&gt;&lt;/script&gt; 创建html12&lt;div id="scene"&gt;&lt;/div&gt; 每个Parallax.js实例都需要一个容器 1234&lt;div id="scene"&gt; &lt;div&gt;My first Layer!&lt;/div&gt; &lt;div&gt;My second Layer!&lt;/div&gt;&lt;/div&gt; 默认情况下，场景的所有直接子元素都将成为移动对象，即图层。 1234&lt;div id="scene"&gt; &lt;div data-depth="0.2"&gt;My first Layer!&lt;/div&gt; &lt;div data-depth="0.6"&gt;My second Layer!&lt;/div&gt;&lt;/div&gt; 但每个图层都需要一个data-depth属性。应用于每个图层的移动将乘以其深度属性。 创建实例12var scene = document.getElementById('scene');var parallaxInstance = new Parallax(scene); 然后就跑起来看看效果。 光标移动，图层也会跟着移动，虽然界面丑点 但是效果出来了。 抠官方demo我用的是webcopy,方法很多，大家随意， 不介绍工具使用. 大概就是趴下来，然后提取主要的代码和图片等。如果大家不愿意趴，我这边已经趴好了。 仓库地址 如果需要的话，可以点进去看看。 总结文章没啥技术含量，大概就是安利一波好东西吧~~ 新开了个Qq群，大家也可以进来互相交流~ iD 718639024 Qq：952822399]]></content>
  </entry>
  <entry>
    <title><![CDATA[mpvue外卖小程序]]></title>
    <url>%2F2018%2F09%2F09%2Fmpvue%E5%A4%96%E5%8D%96%E5%B0%8F%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[前言首先说说为什么自己会想着写一个小程序emmmmmm 感觉没有为什么 就是想写了 我就干了~~~hhhhh 我就粗略看了一下小程序的官方文档和mpvue的文档 然后就开撸了。 项目仓库 欢迎start和pr哦~~ 为了节省大家的宝贵时间，不废话 直接进入正题； 技术栈mpvuempvue 是一个使用 Vue.js 开发小程序的前端框架。框架基于 Vue.js……(可以看官网介绍~). iview weappiview weapp 一套高质量的微信小程序 UI 组件库. 界面展示 大概的界面就是这样(界面是模仿得饿了么 我也只会模仿点页面了hhhhh) 完成进度 小程序的基本界面展示 简单的购买流程 使用全局状态保存部分数据 使用Fly请求数据 使用Easy-mock模拟数据 …… 没有数据库保存真实数据 没有根据多个数据渲染店和商品 没有做添加地址的数据校验等 订单页面还需要优化 折叠显示等 商家端还未开发 …… 其实还有很多功能没写，因为这是刚开始上班没事做的时候撸的(所以兴趣才是最好的老师)，然后现在事情比较忙就可能先放下了 如果有大佬或者有时间的大佬可以帮忙完善或者pr emmm 你直接拿走再写也是可以的~ 技术实现技术实现过程和一些踩过的坑 界面界面主要使用 iview weapp 组件库 然后 有一些组件库没有的自己原生写法来撸，这里还好没啥坑 但是在布局上面似乎有一个1px的问题 我好像没处理 不知道哪位大佬能发现 并且教我怎么解决~~ 单位主要使用小程序的rpx(很好用) 只需要根据iPhone6的尺寸来使用就可以了，详情可以看官方文档. iview weapp input 似乎不能使用双向数据绑定，需要自己重新撸. 底部的tabBar我是用的json来配置的 省得自己写 方便 1234567891011121314151617181920212223242526272829303132tabBar: &#123; color: '#6f6f6f', selectedColor: '#18a3ff', backgroundColor: '#ffffff', borderStyle: 'black', list: [ &#123; pagePath: 'pages/index/main', iconPath: 'static/img/wm.png', selectedIconPath: 'static/img/wms.png', text: '外卖' &#125;, &#123; pagePath: 'pages/order/main', iconPath: 'static/img/dd.png', selectedIconPath: 'static/img/dds.png', text: '订单' &#125;, &#123; pagePath: 'pages/shopp/main', iconPath: 'static/img/tj1.png', selectedIconPath: 'static/img/tj1s.png', text: '推荐' &#125;, &#123; pagePath: 'pages/user/main', iconPath: 'static/img/user.png', selectedIconPath: 'static/img/users.png', text: '我的' &#125; ] &#125; 这块的话可能需要大家查看小程序的文档来配置，其实也简单 跟玩一样就配置的非常好看 可能最麻烦的也是很简单的一个坑 如何引入 其实iview weapp 官方文档写的很清楚了 但是只是大家不知道这么配置而已 我来扣个代码演示一下. 到 GitHub 下载 iView Weapp 的代码，将 dist 目录拷贝到自己的项目中。然后按照如下的方式使用组件，以 Button 为例，其它组件在对应的文档页查看： 123456789101. 添加需要的组件 在页面的 json 中配置（路径根据自己项目位置配置）// 添加 config jsonexport default &#123; config: &#123; // 这儿添加要用的小程序组件 usingComponents: &#123; 'i-button': '../../dist/button/index' &#125; &#125;&#125; 122. 在 wxml 中使用组件&lt;i-button type="primary" bind:click="handleClick"&gt;这是一个按钮&lt;/i-button&gt; 是不是很简单！！！ 没看明白的也可以看我的github仓库哦~ 界面这块大概就是这么多 也可能我写掉了 后续想起来我会更一下的hhhh(懒) mpvuempvue 新建页面需要重新 npm run dev 这个官方文档已经明确说明过了，由于一个页面只用重启一次 问题不大。 小程序的请求似乎不能用axios 所以使用了Fly 来代替，至于为什么 可以看github里面的issues mpvue 支持小程序和vuejs的事件 详情可以查看文档 然后可能最坑的就是页面转跳了吧… 其实官方文档有写 目前页面路径最多只能十层。 比如说我再添加地址的时候 使用了wx.navigateTo(OBJECT) 然后返回到地址的列表页面然后继续重复添加地址 到达一定的数量之后 就不会再跳转，而且返回的也是之前重复的页面 用户体验很不好 所以需要一个解决的办法。文字太多可能看不懂 我来画个图。 关于登录一块的话 我没有做什么处理 直接用新的用户信息接口就可以了 小程序与小游戏获取用户信息接口调整 123&lt;open-data type="groupName" open-gid="xxxxxx"&gt;&lt;/open-data&gt;&lt;open-data type="userAvatarUrl"&gt;&lt;/open-data&gt;&lt;open-data type="userGender" lang="zh_CN"&gt;&lt;/open-data&gt; 总结这样一总结下来感觉自己似乎没写多少功能Orz！！！ 但是这篇文章可能是我写的文字最多的一篇了 如果大家觉得还不错的话可以点个喜欢哦~~ 蟹蟹o(∩_∩)o 哈哈 所以回到标题，兴趣才是最好的老师，接下面准备玩一玩electron-vue….. 写得好累，介绍的不多 可能有遗漏 但是大部分的核心基本上都已经说了，如果大佬们想找我交流的 ，可以加我QQ github 邮箱 都ojbk的 Qq：952822399 就留QQ吧 手指酸了emmmmm~~~~ 告辞 溜 新开了个Qq群，大家也可以进来互相交流~ iD 718639024]]></content>
  </entry>
  <entry>
    <title><![CDATA[为开源社区贡献绵薄之力]]></title>
    <url>%2F2018%2F08%2F01%2F%E4%B8%BA%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E8%B4%A1%E7%8C%AE%E7%BB%B5%E8%96%84%E4%B9%8B%E5%8A%9B%2F</url>
    <content type="text"><![CDATA[前言首先庆祝八一建军节 hhhh 很皮了~~ 文章内容如标题一样很绵薄ヽ(✿ﾟ▽ﾟ)ノemmm~~~ 使用 花裤衩(PanJiaChen) vue-element-admin 发现用户登录界面 使用Chrome浏览器记住密码时候 发现大佬处理的input标签背景变黄的颜色值 有辣么一丝丝不协调 于是去GitHub上面提了issues 然后大佬回复了 还叫我去pr 于是很激动的第一次去pr 然后分享一下自己的感受和pr流程 我使用的GitHub Desktop 工具 大家理解操作就行 (↓↓↓↓↓分割线↓↓↓↓↓) fork 你想贡献的项目 然后去自己的仓库 clone 这个项目 新建分支 (最好注意命名规范！！！) 然后在你新建的分支上修改 然后提交commit 最好描述清晰 做了什么修改之类的 修改完成之后 push 上去 在你自己的仓库查看fork项目 然后有提示你是否 pull requests(绿色的按钮 然后单击干掉它) 耐心等待管理员的处理(反馈 评论 等等之类的) 管理员 merge 之后(成果在下面(〃∀〃)~~) (↓↓↓↓↓分割线↓↓↓↓↓) 其实步骤真的没多少，这篇文章主要是分享 向社区贡献代码的感受 没什么技术含量~ 总的来说 第一次pr 很激动 很开心 2333~ 所以写篇文章分享分享(pei 真不要皮~~~) 如果大佬们有心思可以去看看 我贡献的真的很绵薄！！！ 所以大家一起多贡献自己的绵薄之力 这样社区才会更美好(故障(〃∀〃)~~)]]></content>
  </entry>
  <entry>
    <title><![CDATA[设置相同宽的textarea和select是一样宽的吗？]]></title>
    <url>%2F2018%2F07%2F13%2F%E8%AE%BE%E7%BD%AE%E7%9B%B8%E5%90%8C%E5%AE%BD%E7%9A%84textarea%E5%92%8Cselect%E6%98%AF%E4%B8%80%E6%A0%B7%E5%AE%BD%E7%9A%84%E5%90%97%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[是不是一样的 搞一搞就知道了～ 12345678&lt;textarea class="textarea" name="" id="" cols="" rows=""&gt;&lt;/textarea&gt;&lt;select class="select" name="" id=""&gt; &lt;option value="a"&gt;a&lt;/option&gt; &lt;option value="b"&gt;b&lt;/option&gt; &lt;option value="c"&gt;c&lt;/option&gt; &lt;option value="d"&gt;d&lt;/option&gt;&lt;/select&gt; 123456789101112.textarea&#123; width: 50px; margin: 0; padding: 0; border: 0;&#125;.select &#123; width: 50px; margin: 0; padding: 0; border: 0;&#125; 如果在重置border的情况下 设置textarea 和 select的宽度为50px 那么他的宽度是不一样的 在测试textarea中 发现textarea宽度为50px 的时候 总宽度为50加上默认的border 1px 就是52px 而select在宽度为50px的时候 总宽度为50px 内容减去border 1px 之和后还剩余48px 所以不知道的地方 搞一搞就知道了！hhhh]]></content>
  </entry>
  <entry>
    <title><![CDATA[用vue做一个简单的登录流程]]></title>
    <url>%2F2018%2F07%2F06%2F%E7%94%A8vue%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[vue-login 一个简单的登录界面及登录流程 vue element http easy-mock 用vue和element登录界面，easy-mock模拟数据 用axios发送post请求返回数据，根据返回的数据判断是否登录成功 1234567import axios from 'axios'export default () =&gt; &#123; return axios.create(&#123; baseURL: 'https://www.easy-mock.com' &#125;)&#125; 1234567import Api from '@/services/Api.js'export default &#123; userLogin(parameter) &#123; return Api().post('/userlogin', parameter) &#125;&#125; 123456789101112const data = &#123; userName: this.ruleForm2.userName, pass: this.ruleForm2.pass&#125;UserLogin.userLogin(data).then(function(response) &#123; console.log(response)&#125;).catch(function(err) &#123; console.log(err)&#125;) 如果登录成功加入全局状态store，后台界面根据全局状态判断是否登录,利用vuex-persistedstate保持全局状态 123_this.$store.dispatch('setToken', data.result.token)_this.$store.dispatch('setUserName', data.result.userName)_this.$router.push(&#123; name: 'Admin' &#125;) 如果全局状态isUserLoggedIn为false,则返回登录界面 1234567loggedIn: function() &#123; if (!this.isUserLoggedIn) &#123; this.$router.push(&#123; name: 'Login' &#125;) &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[把AE动画转换成Web原生动画]]></title>
    <url>%2F2018%2F06%2F26%2F%E6%8A%8AAE%E5%8A%A8%E7%94%BB%E8%BD%AC%E6%8D%A2%E6%88%90Web%E5%8E%9F%E7%94%9F%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[把AE动画转换成Web原生动画 先贴效果图 预览地址 pc 端食用更佳 模仿san官网效果文章地址 博客地址 右边这个动画会一直动 在firefox可以直接打开 其他浏览器需要服务环境 正经分割线 ife 官网效果 仓库地址 lottie库https://github.com/airbnb/lottie-web 博客地址 大家其实看第一个就知道怎么弄了 这个我之前写过一个vue-lottie 的时候说过类似的实现方法 文章地址 页面布局12345678910&lt;div class="home-banner"&gt; &lt;div class="home-banner-left"&gt; &lt;h1&gt; &lt;b&gt;ECharts&lt;/b&gt;数据可视化实验室&lt;/h1&gt; &lt;p&gt;由百度 ECharts 团队创建，联合公司内外众多数据可视化从业人组成的技术研究虚拟组织，致力于数据可视化的相关研究、教育普及、产品研发及生态建设。&lt;/p&gt; &lt;/div&gt; &lt;div class="home-banner-right"&gt; &lt;div id="bm"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 页面样式12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091*,*::after,*::before &#123; box-sizing: border-box;&#125;body &#123; padding: 0; margin: 0; background-color: #102131; min-height: 100%;&#125;.home-banner &#123; max-width: 1130px; margin: 0 auto; position: relative; padding-top: 8%;&#125;.home-banner-left &#123; width: 54%; vertical-align: top; display: inline-block; position: relative;&#125;.home-banner-left h1 &#123; font-size: 48px; line-height: 62px; color: #fff; font-weight: 800; margin: 0; margin-bottom: 30px;&#125;.home-banner-left h1 b &#123; font-size: 53px; margin-right: 5px;&#125;.home-banner-left p &#123; color: rgba(255, 255, 255, .7); font-size: 15px; padding-right: 47px; padding-left: 5px; font-weight: 200; line-height: 30px; letter-spacing: 2px;&#125;.home-banner-right &#123; width: 62%; margin-left: -8%; margin-right: -300px; vertical-align: top; display: inline-block; position: relative;&#125;#bm &#123; max-width: 700px; display: block;&#125;@media screen and (max-width: 768px) &#123; .home-banner &#123; padding-top: 2%; &#125; .home-banner-left &#123; text-align: center; display: block; width: 100%; box-sizing: border-box; padding: 0 20px; &#125; .home-banner-right &#123; display: block; width: 100%; margin: 0; &#125;&#125;` 功能实现12345678910&lt;script src="./lottie.min.js"&gt;&lt;/script&gt;&lt;script&gt; var animation = lottie.loadAnimation(&#123; container: document.getElementById('bm'), // the dom element that will contain the animation renderer: 'svg', loop: true, autoplay: true, path: 'test.json' // the path to the animation json &#125;);&lt;/script&gt; 其实这里复制粘贴就好了2333 预览地址 pc 端食用更佳 ife No.8下面还有一个模仿san官网效果的 结果发现之前已经模仿了2333机缘啊哈哈哈 模仿san官网效果文章地址]]></content>
  </entry>
  <entry>
    <title><![CDATA[animation实现登录框]]></title>
    <url>%2F2018%2F06%2F25%2Fanimation%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%A1%86%2F</url>
    <content type="text"><![CDATA[使用 animate.css 实现一个优雅的登录框 资料地址 预览地址 下面的动画效果 css 样式是从 animate.css里面扣出来的2333 1234567891011121314151617181920212223242526&lt;section class="site-container"&gt; &lt;section class="card"&gt; &lt;h3&gt;Login&lt;/h3&gt; &lt;form action=""&gt; &lt;div class="form__wrapper"&gt; &lt;input type="email" class="form__input" id="email" name="email"&gt; &lt;label id="form__label__email" class="form__label" for="email"&gt; &lt;span class="form__label__content"&gt;Email&lt;/span&gt; &lt;/label&gt; &lt;/div&gt; &lt;div class="form__wrapper"&gt; &lt;input type="password" class="form__input" id="password" name="password"&gt; &lt;label id="form__label__password" class="form__label" for="password"&gt; &lt;span class="form__label__content"&gt;Password&lt;/span&gt; &lt;/label&gt; &lt;/div&gt; &lt;div class="form__wrapper__submit"&gt; &lt;div class="form__wrapper_submit__content"&gt; &lt;button id="btn" type="submit" name="submit" class="btn"&gt;Submit&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/section&gt;&lt;/section&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253 /* label 文字上移效果 */.active &#123; -webkit-transform: scale(.9) translate(-14px, -14px); -moz-transform: scale(.9) translate(-14px, -14px); -ms-transform: scale(.9) translate(-14px, -14px); -o-transform: scale(.9) translate(-14px, -14px); transform: scale(.9) translate(-14px, -14px);&#125;/* btn copy animation.css 效果 */@keyframes bounceIn &#123; from, 25%, 50%, 75%, to &#123; -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); &#125; 0% &#123; -webkit-transform: scale3d(1, 1, 1); transform: scale3d(1, 1, 1); &#125; 25% &#123; -webkit-transform: scale3d(1.01, 1.01, 1.01); transform: scale3d(1.01, 1.01, 1.01); &#125; 50% &#123; -webkit-transform: scale3d(1.02, 1.02, 1.02); transform: scale3d(1.02, 1.02, 1.02); &#125; 75% &#123; -webkit-transform: scale3d(1.01, 1.01, 1.01); transform: scale3d(1.01, 1.01, 1.01); &#125; to &#123; -webkit-transform: scale3d(1, 1, 1); transform: scale3d(1, 1, 1); &#125;&#125;.bounceIn &#123; -webkit-animation-duration: 0.75s; animation-duration: 0.75s; -webkit-animation-name: bounceIn; animation-name: bounceIn; animation-iteration-count: infinite;&#125; 详情查看github地址]]></content>
  </entry>
  <entry>
    <title><![CDATA[利用animation制作slider]]></title>
    <url>%2F2018%2F06%2F25%2F%E5%88%A9%E7%94%A8animation%E5%88%B6%E4%BD%9Cslider%2F</url>
    <content type="text"><![CDATA[利用css animation制作slider 文章地址 预览地址 1234567891011121314151617181920212223242526272829303132333435&lt;div class="container"&gt; &lt;div class="img"&gt; &lt;img src="./img/1.jpg" alt=""&gt; &lt;/div&gt; &lt;div class="img"&gt; &lt;img src="./img/2.jpg" alt=""&gt; &lt;/div&gt; &lt;div class="img"&gt; &lt;img src="./img/3.png" alt=""&gt; &lt;/div&gt; &lt;div class="img"&gt; &lt;img src="./img/4.jpg" alt=""&gt; &lt;/div&gt; &lt;div class="img"&gt; &lt;img src="./img/5.jpg" alt=""&gt; &lt;/div&gt; &lt;div class="bottom"&gt; &lt;div class="img-bottom"&gt; &lt;img src="./img/1.jpg" alt=""&gt; &lt;/div&gt; &lt;div class="img-bottom"&gt; &lt;img src="./img/2.jpg" alt=""&gt; &lt;/div&gt; &lt;div class="img-bottom"&gt; &lt;img src="./img/3.png" alt=""&gt; &lt;/div&gt; &lt;div class="img-bottom"&gt; &lt;img src="./img/4.jpg" alt=""&gt; &lt;/div&gt; &lt;div class="img-bottom"&gt; &lt;img src="./img/5.jpg" alt=""&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126*,*::after,*::before &#123; box-sizing: border-box;&#125;html,body &#123; height: 100%;&#125;body &#123; padding: 0; margin: 0;&#125;.container &#123; width: 100%; height: 100%; position: relative; overflow: hidden;&#125;div.img &#123; position: absolute; width: 100%; height: 100%; overflow: hidden;&#125;div.img img &#123; width: 100%; height: 100%;&#125;div.img:nth-child(1) &#123; left: -100%; -webkit-transition: .5s; -moz-transition: .5s; -ms-transition: .5s; -o-transition: .5s; transition: .5s; -webkit-transition-timing-function: ease-out; -moz-transition-timing-function: ease-out; -ms-transition-timing-function: ease-out; -o-transition-timing-function: ease-out; transition-timing-function: ease-out;&#125;div.img:nth-child(2) &#123; top: 100%; -webkit-transition: .5s; -moz-transition: .5s; -ms-transition: .5s; -o-transition: .5s; transition: .5s; -webkit-transition-timing-function: ease-out; -moz-transition-timing-function: ease-out; -ms-transition-timing-function: ease-out; -o-transition-timing-function: ease-out; transition-timing-function: ease-out;&#125;div.img:nth-child(3) &#123; transform: scale(0.1); -webkit-transition: 1s; -moz-transition: 1s; -ms-transition: 1s; -o-transition: 1s; transition: 1s; -webkit-transition-timing-function: ease-in; -moz-transition-timing-function: ease-in; -ms-transition-timing-function: ease-in; -o-transition-timing-function: ease-in; transition-timing-function: ease-in;&#125;div.img:nth-child(4) &#123; transform: scale(2.0); -webkit-transition: 1s; -moz-transition: 1s; -ms-transition: 1s; -o-transition: 1s; transition: 1s; -webkit-transition-timing-function: ease-out; -moz-transition-timing-function: ease-out; -ms-transition-timing-function: ease-out; -o-transition-timing-function: ease-out; transition-timing-function: ease-out; z-index: 1;&#125;div.img:nth-child(5) &#123; transform: rotate(-360deg) scale(0.1); -webkit-transition: .7s; -moz-transition: .7s; -ms-transition: .7s; -o-transition: .7s; transition: .7s; -webkit-transition-timing-function: ease-in-out; -moz-transition-timing-function: ease-in-out; -ms-transition-timing-function: ease-in-out; -o-transition-timing-function: ease-in-out; transition-timing-function: ease-in-out;&#125;div.bottom &#123; position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); width: 850px; z-index: 10;&#125;div.bottom div.img-bottom &#123; float: left; margin: 0 10px;&#125;div.bottom div.img-bottom img &#123; width: 150px; height: 100px;&#125;div.active &#123; left: 0 !important;&#125;div.active &#123; top: 0 !important;&#125;div.active &#123; transform: scale(1.0) !important;&#125;div.active &#123; transform: scale(1.0) !important;&#125;div.active &#123; transform: rotate(0deg) scale(1.0) !important;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647window.onload = function () &#123; var imgBottom = document.getElementsByClassName('img-bottom') var imgToggle = document.getElementsByClassName('img') var attrArr = [ 'leftImg', 'topImg', 'scaleImg', 'scaleImgs', 'scaleRotateImg' ] var getCls = function (element) &#123; return element.getAttribute('class') &#125; var setCls = function (element, cls) &#123; return element.setAttribute('class', cls) &#125; var addCls = function (element, cls) &#123; var baseCls = getCls(element) if (baseCls.indexOf(cls) == -1) &#123; setCls(element, baseCls + ' ' + cls) &#125; &#125; var delCls = function(element, cls) &#123; var baseCls = getCls(element) if(baseCls.indexOf(cls) != -1)&#123; setCls(element, baseCls.split(cls).join(' ').replace(/\s+/g, ' ')) &#125; &#125; var toggleImg = function (i) &#123; return function () &#123; ImgAddIndex(i) &#125; &#125; for (var i = 0; i &lt; imgBottom.length; i++) &#123; imgBottom[i].onclick = toggleImg(i) &#125; function ImgAddIndex (i) &#123; for(var j = 0;j&lt;imgToggle.length;j++) &#123; imgToggle[j].style.zIndex = 0 delCls(imgToggle[j], 'active') &#125; addCls(imgToggle[i], 'active') imgToggle[i].style.zIndex = 9; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[css旋转立方体]]></title>
    <url>%2F2018%2F06%2F24%2Fcss%E6%97%8B%E8%BD%AC%E7%AB%8B%E6%96%B9%E4%BD%93%2F</url>
    <content type="text"><![CDATA[纯 CSS 制作绕中轴旋转的立方体 http://ife.baidu.com/course/detail/id/32 https://codepen.io/jordizle/pen/haIdo 文章已经给了很多资料了 预览地址 123456789101112131415161718192021222324&lt;div id="wrapper"&gt; &lt;div class="viewport"&gt; &lt;div class="cube"&gt; &lt;div class="side"&gt; &lt;div class="cube-image"&gt;1&lt;/div&gt; &lt;/div&gt; &lt;div class="side"&gt; &lt;div class="cube-image"&gt;2&lt;/div&gt; &lt;/div&gt; &lt;div class="side"&gt; &lt;div class="cube-image"&gt;3&lt;/div&gt; &lt;/div&gt; &lt;div class="side"&gt; &lt;div class="cube-image"&gt;4&lt;/div&gt; &lt;/div&gt; &lt;div class="side"&gt; &lt;div class="cube-image"&gt;5&lt;/div&gt; &lt;/div&gt; &lt;div class="side"&gt; &lt;div class="cube-image active"&gt;6&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198*,*::before,*::after &#123; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;&#125;body &#123; background: #1b1b1b; font-family: 'HelveticaNeue-Light', 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif; font-weight: 300;&#125;#wrapper &#123; padding-top: 20%;&#125;.viewport &#123; -webkit-perspective: 800px; -moz-perspective: 800px; -ms-perspective: 800px; -o-perspective: 800px; perspective: 800px; -webkit-perspective-origin: 50% 50%; -moz-perspective-origin: 50% 50%; -ms-perspective-origin: 50% 50%; -o-perspective-origin: 50% 50%; perspective-origin: 50% 50%; -webkit-transform: scale(0.8, 0.8); -moz-transform: scale(0.8, 0.8); -ms-transform: scale(0.8, 0.8); -o-transform: scale(0.8, 0.8); transform: scale(0.8, 0.8); -webkit-transition: .28s; -moz-transition: .28s; -ms-transition: .28s; -o-transition: .28s; transition: .28s;&#125;.cube &#123; position: relative; margin: 0 auto; height: 200px; width: 200px; -webkit-transform-style: preserve-3d; -moz-transform-style: preserve-3d; -ms-transform-style: preserve-3d; -o-transform-style: preserve-3d; transform-style: preserve-3d; -webkit-transform: rotate(180deg) rotateY(0deg); -moz-transform: rotate(180deg) rotateY(0deg); -ms-transform: rotate(180deg) rotateY(0deg); -o-transform: rotate(180deg) rotateY(0deg); transform: rotate(180deg) rotateY(0deg); -webkit-transition: 5s; -moz-transition: 5s; -ms-transition: 5s; -o-transition: 5s; transition: 5s;&#125;.cube&gt;div &#123; overflow: hidden; position: absolute; opacity: .5; height: 200px; width: 200px; background: rgba(0, 191, 255, 0.07); border: 2px solid rgb(0, 170, 255); -webkit-touch-callout: none; -moz-touch-callout: none; -ms-touch-callout: none; -o-touch-callout: none; touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; -o-user-select: none; user-select: none;&#125;.cube&gt;div&gt;div.cube-image &#123; height: 200px; width: 200px; -webkit-transform: rotate(180deg); -moz-transform: rotate(180deg); -ms-transform: rotate(180deg); -o-transform: rotate(180deg); transform: rotate(180deg); line-height: 200px; font-size: 80px; text-align: center; color: #1b9bd8; -webkit-transition: color 600ms; -moz-transition: color 600ms; -ms-transition: color 600ms; -o-transition: color 600ms; transition: color 600ms;&#125;.cube&gt;div:hover &#123; cursor: pointer;&#125;.cube&gt;div:active &#123; cursor: pointer;&#125;.cube:hover &#123; -webkit-transform: rotate(180deg) rotateY(360deg); -moz-transform: rotate(180deg) rotateY(360deg); -ms-transform: rotate(180deg) rotateY(360deg); -o-transform: rotate(180deg) rotateY(360deg); transform: rotate(180deg) rotateY(360deg);&#125;.cube&gt;div:first-child &#123; -webkit-transform: rotateX(90deg) translateZ(100px); -moz-transform: rotateX(90deg) translateZ(100px); -ms-transform: rotateX(90deg) translateZ(100px); -o-transform: rotateX(90deg) translateZ(100px); transform: rotateX(90deg) translateZ(100px); outline: 1px solid transparent;&#125;.cube&gt;div:nth-child(2) &#123; -webkit-transform: translateZ(100px); -moz-transform: translateZ(100px); -ms-transform: translateZ(100px); -o-transform: translateZ(100px); transform: translateZ(100px); outline: 1px solid transparent;&#125;.cube&gt;div:nth-child(3) &#123; -webkit-transform: rotateY(90deg) translateZ(100px); -moz-transform: rotateY(90deg) translateZ(100px); -ms-transform: rotateY(90deg) translateZ(100px); -o-transform: rotateY(90deg) translateZ(100px); transform: rotateY(90deg) translateZ(100px); outline: 1px solid transparent;&#125;.cube&gt;div:nth-child(4) &#123; -webkit-transform: rotateY(180deg) translateZ(100px); -moz-transform: rotateY(180deg) translateZ(100px); -ms-transform: rotateY(180deg) translateZ(100px); -o-transform: rotateY(180deg) translateZ(100px); transform: rotateY(180deg) translateZ(100px); outline: 1px solid transparent;&#125;.cube&gt;div:nth-child(5) &#123; -webkit-transform: rotateY(-90deg) translateZ(100px); -moz-transform: rotateY(-90deg) translateZ(100px); -ms-transform: rotateY(-90deg) translateZ(100px); -o-transform: rotateY(-90deg) translateZ(100px); transform: rotateY(-90deg) translateZ(100px); outline: 1px solid transparent;&#125;.cube&gt;div:nth-child(6) &#123; -webkit-transform: rotateX(-90deg) rotate(180deg) translateZ(100px); -moz-transform: rotateX(-90deg) rotate(180deg) translateZ(100px); -ms-transform: rotateX(-90deg) rotate(180deg) translateZ(100px); -o-transform: rotateX(-90deg) rotate(180deg) translateZ(100px); transform: rotateX(-90deg) rotate(180deg) translateZ(100px); outline: 1px solid transparent;&#125;@media (max-width: 640px) &#123; .viewport &#123; -webkit-transform: scale(0.6, 0.6); -moz-transform: scale(0.6, 0.6); -ms-transform: scale(0.6, 0.6); -o-transform: scale(0.6, 0.6); transform: scale(0.6, 0.6); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[vue个人小项目总结]]></title>
    <url>%2F2018%2F06%2F22%2Fvue%E4%B8%AA%E4%BA%BA%E5%B0%8F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[简介自己写了一个vue小项目总结总结(为了节省篇幅和大家阅读的时间直接进入正题 认真脸！) 项目详情可以查看的我Github仓库地址 项目预览地址 用户登录帐号密码都是11 后台管理登录也是11 (其实还有别的帐号密码,如果您有心情可以查看api自己用Postman注册,用户注册自己可以直接在页面上注册) github描述文档写了使用了写技术栈 和 界面截图 功能总结 前端api调用 1234567891011121314151617181920212223242526272829303132333435363738# apiimport axios from 'axios'import store from '@/store/store'export default () =&gt; &#123; return axios.create(&#123; baseURL: `http://123.207.60.132:8081/`, headers: &#123; Authorization: `Bearer $&#123;store.state.token&#125;` &#125; &#125;)&#125;import Api from '@/services/Api'export default &#123; userLogin(credentials) &#123; return Api().post('/userLogin', credentials) &#125;&#125;# music apiimport axios from 'axios'export default () =&gt; &#123; return axios.create(&#123; baseURL: `http://123.207.60.132:3000/` &#125;)&#125;import Api from '@/services/musicApi'export default &#123; getTopList() &#123; return Api().get('/top/list?idx=3') &#125;&#125; 更多内容地址 前端vuex状态管理 12345678910111213141516171819202122232425262728293031323334import Vue from 'vue'import Vuex from 'vuex'import createPersistedState from 'vuex-persistedstate'Vue.use(Vuex)export default new Vuex.Store(&#123; strict: true, plugins: [createPersistedState()], state: &#123; token: null, user: null, isUserLoggedIn: false &#125;, mutations: &#123; setToken(state, token) &#123; state.token = token state.isUserLoggedIn = !!(token) &#125;, setUser(state, user) &#123; state.user = user &#125; &#125;, actions: &#123; setToken(&#123; commit &#125;, token) &#123; commit('setToken', token) &#125;, setUser(&#123; commit &#125;, user) &#123; commit('setUser', user) &#125; &#125;&#125;) 更多内容地址 前端界面 123456789101112131415161718192021222324252627282930# 组件使用&lt;v-slider :sliderImg="sliderImg"&gt;&lt;/v-slider&gt;# 组件引入 import VSlider from './Slider/Index'export default &#123; # 声明组件 components: &#123; VSlider &#125;, data() &#123; return &#123; sliderImg: [ &#123; src: 'item1' &#125;, &#123; src: 'item2' &#125;, &#123; src: 'item3' &#125;, &#123; src: 'item4' &#125; ] &#125; &#125;&#125; 前端页面基本都是按照这样的方式写的 更多内容地址 后台界面 后台界面除了按照前端页面写的以外还用了vue-element-admin后台界面的写法 其中侧边栏是根据 router.js 配置的路由并且根据权限动态生成的，这样就省去了写一遍路由还要手动再写一次侧边栏这种麻烦事，但也遇到了一个问题，路由可能会有多层嵌套，很多人反馈自己的侧边栏会有三级，甚至还有五级的。所以重构了一下侧边栏，使用了递归组件，这样不管你多少级，都能愉快的显示了。文章地址 复制的hhhh 页面还用了icon文章地址 主页显示用了v-charts图表组件 这个基本的使用挺简单的看看文档就ok了 不用另外写文章了 更多内容地址 前端router 12345678910111213import Vue from 'vue'import Router from 'vue-router'Vue.use(Router)export const constantRouterMap = [ &#123; path: '*', redirect: '/404', hidden: true &#125;]export default new Router(&#123; mode: 'history', // require service support scrollBehavior: () =&gt; (&#123; y: 0 &#125;), routes: constantRouterMap&#125;) 更多内容地址 后端基本服务 1234567891011121314151617const express = require('express')const app = express()const config = require('./config/config')const fs = require('fs')const path = require('path')require('./router/index.js')(app)app.use(express.static(path.resolve(__dirname, './dist')))app.get('*', function(req, res) &#123; const html = fs.readFileSync(path.resolve(__dirname, './dist/index.html'), 'utf-8') res.send(html)&#125;)app.listen(config.port, function () &#123; console.log(`server run $&#123;config.port&#125; port`)&#125;) 后台主要使用nodejs express mongodb提供服务 功能 用户登录注册 功能 管理员登录注册 用户的密码加密 更多内容地址 后端model 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455const mongoose = require('mongoose')const Schema = mongoose.Schemaconst bcrypt =require('bcryptjs') // 密码加密let SALT_WORK_FACTOR = 10const config = require('../config/config')mongoose.connect(config.database)var UserSchema = new Schema(&#123; userName: &#123; type: String, unique: true, // 不重复 require: true // 不为空 &#125;&#125;)// 在保存密码之前用bcrypt加密保证密码只有用户知道UserSchema.pre('save', function (next)&#123; // 保存this指向 let _this = this // 判断是否为最新 if(!_this.isModified('password'))&#123; return next() &#125; // 加密EMMM 产生一个salt bcrypt.genSalt(SALT_WORK_FACTOR, function (err, salt)&#123; if(err)&#123; return next(err) &#125; // 结合salt 生成 hash bcrypt.hash(_this.password, salt, function (err, hash) &#123; if(err)&#123; return next(err) &#125; // 用hash覆盖明文密码 _this.password = hash next() &#125;) &#125;)&#125;)// 通过bcrypt的compare方法，对再次传入的密码和数据库中保存的加密后的密码进行比较，如果匹配，则登录成功 isMatch 为布尔值// mongoose 模型扩展 在 methods 对象上扩展UserSchema.methods.comparePassword = function (candidatePassword, cb) &#123; bcrypt.compare(candidatePassword, this.password, function (err, isMatch) &#123; if (err) &#123; return cb(err); &#125; cb(null, isMatch); &#125;);&#125;;module.exports = mongoose.model('User', UserSchema) 使用mongoose Schema定义数据模型 通过bcrypt密码加密 扩展方法 对密码加密 更多内容地址 后端controllers 12345678910111213141516171819202122232425const User = require('../model/User')const AdminUser = require('../model/AdminUser')const jwt = require('jsonwebtoken')const config = require('../config/config')// tokenfunction jwtSignUser(user) &#123; const ONE_WEEK = 60 * 60 * 24 * 7 return jwt.sign(user, config.authentication.jwtSecret, &#123; expiresIn: ONE_WEEK &#125;)&#125;module.exports = &#123; async userLogin(req, res) &#123; try &#123; await User.findOne(&#123; userName: req.body.userName &#125;, function (err, user) &#123; ......... &#125;) &#125; &#125;&#125; 登录成功返回 123success: true,message: '登录成功',token: 'token值' 登录成功返回 123success: false,message: '登录失败', (或其他信息详情看文件)token: '' 对用户的密码判断 123user.comparePassword(req.body.pass, (err, isMatch) =&gt; &#123; ...&#125; 更多内容地址 总结 通过上面的练习学习了更多新知识 更加理解前后端的交互 加强了技术掌握程度 还有很多不符合现在开发的规范 代码不够精简干练 基础知识掌握不牢固 设计审美水平需要提升 …… 大概就是这么多吧, 项目还有很多部规范的地方以后会慢慢改正, 虽然是个人里练习的项目, 自己还是话了很多时间和心血 最后 最后 最后 说一个厚脸皮的话 小哥哥小姐姐如果觉得不错的话可以给小生点一个 Star 嘛 谢谢哇QAQ~~ 自己马上就要实习了 有大佬看上带走的吗！QAQ]]></content>
  </entry>
  <entry>
    <title><![CDATA[css布局]]></title>
    <url>%2F2018%2F06%2F20%2Fcss%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[更多信息可以查看我的github仓库 MDN 定位https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D MDN 定位实战https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Practical_positioning_examples MDN Flexboxhttps://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox 布局 这个基础需要恶补 圣杯布局 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768# cssbody &#123; margin: 0; padding: 0;&#125;.header,.footer &#123; background: red; padding: 20px 0;&#125;.container &#123; padding-left: 200px; padding-right: 200px; /* min-width: 600px; */&#125;.content,.left,.right &#123; height: 200px; float: left; position: relative;&#125;.content &#123; width: 100%; background: gold;&#125;.left &#123; width: 200px; height: 200px; background: #333; margin-left: -100%; right: 200px;&#125;.right &#123; width: 200px; height: 200px; background: #eee; margin-right: -200px;&#125;.footer &#123; clear: both;&#125;* html .left &#123; left: 200px;&#125;# html&lt;div class="header"&gt; header&lt;/div&gt;&lt;div class="container"&gt; &lt;div class="content"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Obcaecati iusto cumque quibusdam quis qui sit quisquam iure repellat perferendis. Tempora accusantium dignissimos, magnam est placeat enim dicta dolores nam distinctio!&lt;/div&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt; footer&lt;/div&gt; 双飞翼布局 123456789101112131415161718192021222324252627282930313233343536#css .left,.main,.right &#123; float: left; min-height: 200px;&#125;.left &#123; background: gray; width: 200px; margin-left: -100%;&#125;.main &#123; background: rgb(252, 102, 102); width: 100%;&#125;.right &#123; background: #333; width: 200px; margin-left: -200px;&#125;.content &#123; margin: 0 200px; overflow: hidden;&#125;#html &lt;div class="container"&gt; &lt;div class="main"&gt; &lt;div class="content"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Culpa quos labore, ad officiis animi libero ipsam dolorum explicabo placeat facere fuga ex suscipit porro nesciunt quod mollitia corrupti voluptatem a?&lt;/div&gt; &lt;/div&gt; &lt;div class="left"&gt;left&lt;/div&gt; &lt;div class="right"&gt;right&lt;/div&gt;&lt;/div&gt; 圣杯布局和双飞翼布局的作用和区别 http://www.cnblogs.com/woodk/p/5147085.html http://www.cnblogs.com/imwtr/p/4441741.html flex 布局 1234567891011121314151617181920212223242526#css.container &#123; -webkit-display:flex; display: flex; min-height: 200px;&#125;.left &#123; order: -1; background: red; flex-basis: 200px;&#125;.main &#123; background: forestgreen; flex-grow: 1;&#125;.right&#123; background: gold; flex-basis: 300px;&#125;#html&lt;div class="container"&gt; &lt;div class="main"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Eaque quae, veritatis dignissimos laborum debitis id accusantium dolore inventore odit sed! Sunt officiis temporibus esse eum ab fuga ad sequi officia?&lt;/div&gt; &lt;div class="left"&gt;left&lt;/div&gt; &lt;div class="right"&gt;right&lt;/div&gt;&lt;/div&gt; 绝对定位布局 1234567891011121314151617181920212223242526272829303132333435363738# css .container &#123; position: relative;&#125;.main,.right,.left &#123; top: 0; height: 130px;&#125;.main &#123; background: gray; margin: 0 300px 0 200px;&#125;.right &#123; position: absolute; width: 300px; right: 0; background: red;&#125;.left &#123; width: 200px; position: absolute; left: 0; background: green;&#125;#html&lt;div class="container"&gt; &lt;div class="main"&gt;man&lt;/div&gt; &lt;div class="left"&gt;left&lt;/div&gt; &lt;div class="right"&gt;right&lt;/div&gt;&lt;/div&gt; 实现布局还原 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212#css body&#123; margin: 0; padding: 0;&#125;* &#123; box-sizing: border-box;&#125;.fl&#123; float: left;&#125;.ri &#123; float: right;&#125;.header&#123; width: 100%; min-width: 960px; height: 100px; background: #333;&#125;.header-content&#123; width: 960px; height: 100%; margin: 0 auto;&#125;.header-content .logo&#123; width: 100px; height: 100%;&#125;.header-content .logo h1 &#123; margin: 0; padding: 0; font-size: 40px; color: #fff; line-height: 100px; text-align: center;&#125;.header-content .about a&#123; display: inline-block; padding: 0 4px; color: #fff; font-size: 16px; line-height: 100px;&#125;.banner&#123; width: 100%; height: 400px; background: rgb(77, 206, 77); position: relative;&#125;.list&#123; position: absolute; bottom: 10px; right: 10%; -webkit-display: flex; display: flex;&#125;.list span &#123; display: block; width: 30px; height: 40px; line-height: 40px; background: rgba(238, 238, 238, 0.7); border: 1px solid #333; float: left; text-align: center; align-self: flex-end; margin: 0 2px;&#125;/* .list span:hover&#123; height: 50px; line-height: 60px; &#125; */.list span.active&#123; height: 50px; line-height: 60px; &#125;.nav&#123; width: 100%; height: 80px; background: #fff; border-bottom: 1px solid #eee;&#125;.nav-content &#123; width: 960px; height: 100%; margin: 0 auto;&#125;.nav-content a&#123; display: block; float: left; width: 140px; height: 50px; line-height: 50PX; text-align: center; text-decoration: none; color: #000; border-left: 1px solid #c5c5c5; border-top: 1px solid #c5c5c5; border-right: 1px solid #c5c5c5; border-bottom: 1px solid #c5c5c5; background: #eee; border-radius: 20px 20px 0 0; margin-top: 30px;&#125;.nav-content a.active&#123; background: #fff; border-bottom: 1px solid #fff;&#125;.main&#123; width: 960px; overflow: hidden; margin: 10px auto 0;&#125;.main .row&#123; -webkit-display: flex; display: flex;&#125;.main .row .row-content &#123; flex: 1; height: 200px; text-align: center; border: 1px solid #bfbfbf; /* padding: 80px; */ margin: 4px; align-items: center; justify-content: center; -webkit-display: flex; display: flex;&#125;.footer&#123; width: 100%; height: 100px; background: #404040; text-align: center; line-height: 100px; font-size: 16px; color: #fff;&#125;# html&lt;div class="header"&gt; &lt;div class="header-content"&gt; &lt;div class="logo fl"&gt; &lt;h1&gt;logo&lt;/h1&gt; &lt;/div&gt; &lt;div class="about ri"&gt; &lt;a href="#"&gt;Github&lt;/a&gt; &lt;a href="#"&gt;Register&lt;/a&gt; &lt;a href="#"&gt;Login&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="banner"&gt; &lt;div class="list"&gt; &lt;span&gt;1&lt;/span&gt; &lt;span class="active"&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="nav"&gt; &lt;div class="nav-content"&gt; &lt;a href="#" class="active"&gt;HOME&lt;/a&gt; &lt;a href="#"&gt;PROFLE&lt;/a&gt; &lt;a href="#"&gt;ABOUT&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="main"&gt; &lt;div class="row"&gt; &lt;div class="row-content"&gt;content&lt;/div&gt; &lt;div class="row-content"&gt;content&lt;/div&gt; &lt;div class="row-content"&gt;content&lt;/div&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;div class="row-content"&gt;content&lt;/div&gt; &lt;div class="row-content"&gt;content&lt;/div&gt; &lt;div class="row-content"&gt;content&lt;/div&gt; &lt;div class="row-content"&gt;content&lt;/div&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;div class="row-content"&gt;content&lt;/div&gt; &lt;div class="row-content"&gt;content&lt;/div&gt; &lt;div class="row-content"&gt;content&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt; &lt;p&gt;&amp;copy; 2018 ife.baidu.com&lt;/p&gt;&lt;/div&gt; 预览地址]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSS3图片旋转木马效果]]></title>
    <url>%2F2018%2F06%2F08%2FCSS3%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[CSS3图片旋转木马效果模仿demo 资料 资料demo 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127# html&lt;div class="stage_area"&gt; &lt;div class="container" id="container"&gt; &lt;img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg" alt=""&gt; &lt;img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg" alt=""&gt; &lt;img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg" alt=""&gt; &lt;img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg" alt=""&gt; &lt;img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg" alt=""&gt; &lt;img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg" alt=""&gt; &lt;img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg" alt=""&gt; &lt;img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg" alt=""&gt; &lt;img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg" alt=""&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="stage_button"&gt; &lt;button id="prev"&gt;上滑&lt;/button&gt; &lt;button id="next"&gt;下滑&lt;/button&gt;&lt;/div&gt;# css.stage_area &#123; width: 900px; margin-left: auto; margin-right: auto; background: #f0f0f0; -webkit-perspective: 800px; -moz-perspective: 800px; perspective: 800px; position: relative; padding: 100px 50px; min-height: 100px;&#125;.container &#123; -webkit-transform-style: preserve-3d; -moz-transform-style: preserve-3d; transform-style: preserve-3d; width: 128px; height: 100px; left: 50%; margin-left: -64px; position: absolute; /* transform: rotateY(40deg); */ -webkit-transition: transform 1s; -moz-transition: transform 1s; transition: transform 1s;&#125;.container img &#123; position: absolute;&#125;.container img:nth-child(1) &#123; transform: rotateY(0deg) translateZ(195.839px);&#125;.container img:nth-child(2) &#123; transform: rotateY(40deg) translateZ(195.839px);&#125;.container img:nth-child(3) &#123; transform: rotateY(80deg) translateZ(195.839px);&#125;.container img:nth-child(4) &#123; transform: rotateY(120deg) translateZ(195.839px);&#125;.container img:nth-child(5) &#123; transform: rotateY(160deg) translateZ(195.839px);&#125;.container img:nth-child(6) &#123; transform: rotateY(200deg) translateZ(195.839px);&#125;.container img:nth-child(7) &#123; transform: rotateY(240deg) translateZ(195.839px);&#125;.container img:nth-child(8) &#123; transform: rotateY(280deg) translateZ(195.839px);&#125;.container img:nth-child(9) &#123; transform: rotateY(320deg) translateZ(195.839px);&#125;# jswindow.onload = initfunction init()&#123; var prev = document.querySelector('#prev') var next = document.querySelector('#next') var container = document.querySelector('#container') var len = 0 var transform = function(element, value, key) &#123; key = key || "Transform"; ["Moz", "O", "Ms", "Webkit", ""].forEach(function(prefix) &#123; element.style[prefix + key] = value; &#125;); return element; &#125; prev.addEventListener('click', function()&#123; var _this = this len-=40 transform(container, 'rotateY('+ len +'deg)'); &#125;) next.addEventListener('click', function()&#123; var _this = this len+=40 transform(container, 'rotateY('+ len +'deg)'); &#125;)&#125; js部分用了大佬demo的js方法（就是赞！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[卡片翻转动效]]></title>
    <url>%2F2018%2F06%2F07%2F%E5%8D%A1%E7%89%87%E7%BF%BB%E8%BD%AC%E5%8A%A8%E6%95%88%2F</url>
    <content type="text"><![CDATA[卡片翻转动效地址 预览地址 资料 资料 视频地址 效果图 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# html&lt;div class="container"&gt;&lt;div class="box"&gt;&lt;div class="positive"&gt;&lt;/div&gt;&lt;div class="negative"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;# css.box&#123; position: relative; width: 250px; height: 380px; margin-left: auto; margin-right: auto; transform: rotateY(0deg); -webkit-transform-style: preserve-3d; -moz-transform-style: preserve-3d; transform-style: preserve-3d; -webkit-transition: transform .8s ease-in-out; -moz-transition: transform .8s ease-in-out; transition: transform .8s ease-in-out; -webkit-perspective: 800px; -moz-perspective: 800px; perspective: 800px;&#125;.positive,.negative&#123; width: 250px; height: 380px; background-size: cover; position: absolute; backface-visibility: hidden; &#125;.positive&#123; transform: rotateY(0deg); background-image: url(../img/正面.jpg);&#125;.negative&#123; background-image: url(../img/反面.jpg); transform: rotateY(180deg);&#125;.box:hover&#123; transform: rotateY(180deg); &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[vue-lottie动画效果]]></title>
    <url>%2F2018%2F06%2F06%2Fvue-lottie%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[vue-lottie动画效果之前用lottie模仿过san官网的动画效果(没有打广告QAQ) 仓库地址 模仿demo blog 掘金 用lottie的好处有很多(…….此处省略ｎ字) 简单来说就是简单高效的还原设计的动画效果 然后在个人项目使用vue-lottie 分享一些小小经验吧 废话不多说～～～ (正经分割线) 分析官方demo先来一个简单的尝尝鲜 vue-lottie仓库 vue-lottie demo 打开仓库可以看见很多很棒的效果（nice Installation1npm install --save vue-lottie Usage12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;template&gt; &lt;div id="app"&gt; &lt;lottie :options="defaultOptions" :height="400" :width="400" v-on:animCreated="handleAnimation"/&gt; &lt;div&gt; &lt;p&gt;Speed: x&#123;&#123;animationSpeed&#125;&#125;&lt;/p&gt; &lt;input type="range" value="1" min="0" max="3" step="0.5" v-on:change="onSpeedChange" v-model="animationSpeed"&gt; &lt;/div&gt; &lt;button v-on:click="stop"&gt;stop&lt;/button&gt; &lt;button v-on:click="pause"&gt;pause&lt;/button&gt; &lt;button v-on:click="play"&gt;play&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import Lottie from './lottie.vue'; import * as animationData from './assets/pinjump.json'; export default &#123; name: 'app', components: &#123; 'lottie': Lottie &#125;, data() &#123; return &#123; defaultOptions: &#123;animationData: animationData&#125;, animationSpeed: 1 &#125; &#125;, methods: &#123; handleAnimation: function (anim) &#123; this.anim = anim; &#125;, stop: function () &#123; this.anim.stop(); &#125;, play: function () &#123; this.anim.play(); &#125;, pause: function () &#123; this.anim.pause(); &#125;, onSpeedChange: function () &#123; this.anim.setSpeed(this.animationSpeed); &#125; &#125; &#125;&lt;/script&gt; 这是之前官方给的demo代码 基本上和平时使用没啥不一样(所以只需要复制粘贴就ok了) 12# json 动画效果AE转json后的文件import * as animationData from './assets/pinjump.json'; 引入的json需要改！！！ 12# 这里引入了 lottie组件import Lottie from './lottie.vue'; 12345678910111213141516171819202122232425262728293031323334353637383940# lottie.vue&lt;template&gt; &lt;div :style="style" ref="lavContainer"&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt; import lottie from 'lottie-web'export default &#123; props: &#123; options: &#123; type: Object, required: true &#125;, height: Number, width: Number &#125;, data() &#123; return &#123; style: &#123; width: this.width ? `$&#123;this.width&#125;px` : '100%', height: this.height ? `$&#123;this.height&#125;px` : '100%', overflow: 'hidden', margin: '0 auto' &#125; &#125; &#125;, mounted() &#123; this.anim = lottie.loadAnimation(&#123; container: this.$refs.lavContainer, renderer: 'svg', loop: this.options.loop !== false, autoplay: this.options.autoplay !== false, animationData: this.options.animationData, rendererSettings: this.options.rendererSettings &#125; ) this.$emit('animCreated', this.anim) &#125; &#125;&lt;/script&gt; 然后会发现还是有错误(缺少组件！) 其实很简单啦，打开仓库进入src然后打开lottle组件然后复制过去就ok啦hhh(简单) 这是效果图（是不是很简单２３３ 使用别的json文件官方给给了一个很好的效果网站 地址 下载json文件 然后更换引入的json 12# json 动画效果AE转json后的文件import * as animationData from './assets/blood_transfusion_kawaii.json.json'; 是不是也很简单！！！ 使用vue-lottie模仿san官网的动画效果先来效果图～～～ 因为有多个需要用到lottie动画，想了半天不知道怎么解决调用方法的问题 最后想了一个简单的方法 直接将每一个动画抽到一个组件 组件内依然用之前的方法（稍微改造一下就行 然后利用父子组件传数据的形式传递json文件 子组件props接收 123456789101112# html&lt;template&gt; &lt;div class="card-panel" @mouseenter="lottiePlay" @mouseleave="lottieStop"&gt; &lt;div class="card-panel-icon-wrapper icon-shoppingCard"&gt; &lt;lottie :options="defaultOptions" :height="80" :width="80" v-on:animCreated="handleAnimation" /&gt; &lt;/div&gt; &lt;div class="card-panel-description"&gt; &lt;div class="card-panel-text"&gt;今日活跃&lt;/div&gt; &lt;div class="card-panel-num"&gt;2600&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; 1234567891011121314151617# propsprops: &#123; animationDataPath: &#123; type: Object, default: null &#125; &#125;, data() &#123; return &#123; defaultOptions: &#123; // animationData: animationDataPath, animationData: this.animationDataPath, autoplay: false, # 不自动播放 loop: false # 不循环 &#125; &#125;&#125; 123456789# 事件调用@mouseenter="lottiePlay" @mouseleave="lottieStop"lottiePlay: function() &#123; this.anim.play()&#125;,lottieStop: function() &#123; this.anim.stop()&#125; 然后就到了父组件传数据 1234# 父组件&lt;panel-lottie :animationDataPath="animationDataPathOne"&gt;&lt;/panel-lottie&gt;animationDataPathOne: require('../../../public/json/compass.json') 自己用到了require引入json 然后打包出来 一样可以正常运行 如果大家有很好的方法可以教我！我好学习学习 emmmmm 大概就是这么多吧～ 如果实在需要这个的源码可以打开我的github仓库 由于项目还是一个半成品 所以地址就放在最后面了 vue-lottie源码 项目地址 如果大家觉得不错的话 可以点star哦（厚脸皮２３３]]></content>
  </entry>
  <entry>
    <title><![CDATA[css小猫笑起来的动画]]></title>
    <url>%2F2018%2F06%2F05%2Fcss%E5%B0%8F%E7%8C%AB%E7%AC%91%E8%B5%B7%E6%9D%A5%E7%9A%84%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[No.3 - CSS transition 和 CSS transform 配合制作动画仓库地址 预览地址 资料 文章地址 其实文章地址里面提供的资料已经很不错了！！！（偷懒～ 效果 代码实现12345678910111213141516171819202122232425262728293031323334353637# html&lt;div class="container"&gt; &lt;!-- 脸 --&gt; &lt;div class="face"&gt; &lt;!-- 头发 --&gt; &lt;div class="hair"&gt;&lt;/div&gt; &lt;!-- 眼睛 --&gt; &lt;div class="eye-wrap"&gt; &lt;div class="eye left"&gt; &lt;div class="eye-circle"&gt; &lt;div class="eye-core"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="eye-bottom"&gt;&lt;/div&gt; &lt;div class="face-red"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="eye right"&gt; &lt;div class="eye-circle"&gt; &lt;div class="eye-core"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="eye-bottom"&gt;&lt;/div&gt; &lt;div class="face-red"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 鼻子 --&gt; &lt;div class="nose"&gt;&lt;/div&gt; &lt;!-- 嘴巴 --&gt; &lt;div class="mouth-wrap"&gt; &lt;div class="mouth left"&gt;&lt;/div&gt; &lt;div class="mouth right"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 耳朵 --&gt; &lt;div class="ear-wrap"&gt; &lt;div class="ear left"&gt;&lt;/div&gt; &lt;div class="ear right"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# css 动画部分样式.face,.hair,.face-red,.eye-bottom,.ear,.eye-core,.mouth&#123; transition: transform 1s; &#125;.face-red&#123; transition: opacity 1s;&#125;.mouth&#123; transition: border-radius 1s;&#125;.face:hover~.ear-wrap .left&#123; transform-origin: 50%, 100%; transform: rotate(-30deg);&#125;.face:hover~.ear-wrap .right&#123; transform-origin: 50%, 100%; transform: rotate(30deg);&#125;.face:hover .eye-wrap .eye-bottom&#123; transform: translateY(-15px);&#125;.face:hover .eye-wrap .face-red&#123; opacity: 1;&#125;.face:hover .eye-wrap .eye-core&#123; transform: scaleX(.8);&#125;.face:hover .mouth-wrap .left&#123; border-radius: 0% 40% 50% 50%;&#125;.face:hover .mouth-wrap .right&#123; border-radius: 0% 40% 50% 50%;&#125;.face:hover&#123; transform: scaleX(.99); transform: translateY(-6px);&#125;.face:hover .hair&#123; transform: scaleX(.9);&#125; Qq: 952822399]]></content>
  </entry>
  <entry>
    <title><![CDATA[掘金头像旋转动画]]></title>
    <url>%2F2018%2F06%2F04%2F%E6%8E%98%E9%87%91%E5%A4%B4%E5%83%8F%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[掘金头像旋转动画 参考文章或者地址 文章 掘金头像地址 模仿地址 代码实现12# 结构&lt;div class="avatar"&gt;&lt;/div&gt; 12345678910111213141516171819# 样式.avatar &#123; width: 100px; height: 100px; border-radius: 50%; overflow: hidden; margin: 0 auto; background-image: url(https://avatars2.githubusercontent.com/u/24250627?s=460&amp;v=4); background-size: cover;&#125;.avatar:hover &#123; -webkit-transform: rotate(666turn); transform: rotate(666turn); transition-delay: 1s; transition-property: all; transition-duration: 59s; transition-timing-function: cubic-bezier(.34, 0, .84, 1)&#125; 资料参考turn 转、圈（Turns）。一个圆共1圈 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad 资料有兼容说明 Qq: 952822399]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据结构与算法JavaScript描述五]]></title>
    <url>%2F2018%2F05%2F29%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95JavaScript%E6%8F%8F%E8%BF%B0%E4%BA%94%2F</url>
    <content type="text"><![CDATA[可以看github也是一样的 笔记主要都在github上面 [传送门] 第五章 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# Queue类function Queue()&#123; this.dataStore = [] this.enqueue = enqueue this.dequeue = dequeue this.front = front this.back = back this.toString = toString this.empty = empty this.count = count&#125;function enqueue(element)&#123; this.dataStore.push(element)&#125;function dequeue()&#123; return this.dataStore.shift()&#125;function front()&#123; return this.dataStore[0]&#125;function back()&#123; return this.dataStore[this.dataStore.length-1]&#125;function toString()&#123; var retStr = '' for(var i = 0;i&lt;this.dataStore.length;++i)&#123; retStr += this.dataStore[i] + '\n' &#125; return retStr&#125;function empty()&#123; if(this.dataStore.length == 0)&#123; return true &#125; else &#123; return false &#125;&#125;function count()&#123; return this.dataStore.length&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# 节省篇幅 抽出Deueue类# Deueuefunction Deueue() &#123; this.dataStore = [] this.enqueue = enqueue this.frontEnqueue = frontEnqueue this.dequeue = dequeue this.backDequeue = backDequeue this.front = front this.back = back this.toString = toString this.empty = empty&#125;function enqueue(element) &#123; this.dataStore.push(element)&#125;# 新增加的function frontEnqueue(element) &#123; this.dataStore.unshift(element)&#125;function dequeue() &#123; return this.dataStore.shift()&#125;# 新增加的function backDequeue() &#123; return this.dataStore.pop()&#125;function front() &#123; return this.dataStore[0]&#125;function back() &#123; return this.dataStore[this.dataStore.length - 1]&#125;function toString() &#123; var retStr = '' for (var i = 0; i &lt; this.dataStore.length; ++i) &#123; retStr += this.dataStore[i] + '\n' &#125; return retStr&#125;function empty() &#123; if (this.dataStore.length == 0) &#123; return true &#125; else &#123; return false &#125;&#125; 第一题１. 修改Queue 类 形成一个Dueue类 这是一个类似队列类似的数据结构 允许从队列两端添加和删除元素 因此也叫双向队列 写一段测试程序测试该类 123456789101112131415161718192021# 测试代码var q = new Deueue()q.enqueue('one')q.enqueue('two')q.enqueue('three')q.frontEnqueue('four')console.log(q.toString())q.dequeue()console.log(q.toString())q.backDequeue()console.log(q.toString()) 第二题 2.使用Deque类来判断一个给定的单词是否为回文 123456789101112131415161718192021222324252627# 测试代码function isPalindrmoe(word) &#123; var words = new Deueue() for (var i = 0; i &lt; word.length; ++i) &#123; words.enqueue(word[i]) &#125; var resStr = '' while (words.dataStore.length &gt; 0) &#123; resStr += words.backDequeue() &#125; if (word === resStr) &#123; console.log('是回文') &#125; else &#123; console.log('不是回文') &#125;&#125;isPalindrmoe('racecar')isPalindrmoe('hello') 未完待续]]></content>
  </entry>
  <entry>
    <title><![CDATA[每天十分钟学习新东西-carbon]]></title>
    <url>%2F2018%2F05%2F27%2F%E6%AF%8F%E5%A4%A9%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%B9%A0%E6%96%B0%E4%B8%9C%E8%A5%BF-carbon%2F</url>
    <content type="text"><![CDATA[每天十分钟学习新东西系列文章仓库地址 github carbon让代码截图好看点 项目地址 戳我进去 掘金这个chrome插件总是会安利一些有趣的东西～ 其实官方文档已经说明很清晰了emmmmm 来个图(有图有真相～～～) 这里有一个视频演示地址 用法12345将文件拖放到编辑器中追加一个GitHub gist id到网址（例如carbon.now.sh/GIST_ID_HERE） 英文 (Append a GitHub gist id to the url (e.g. carbon.now.sh/GIST_ID_HERE))直接粘贴你的代码 定制1将所有代码都包含在Carbon中就可以更改语法主题，背景颜色，窗口主题或填充 导出/共享1也可以直接保存图片 或者分享Twitter 第二个用法看不懂 有大佬会的可以教教我 个人觉得最简单的方法就是将文件直接拖拽进去就ok了 这样也很省心 Qq: 952822399]]></content>
  </entry>
  <entry>
    <title><![CDATA[每天十分钟学习新东西-warriosjs]]></title>
    <url>%2F2018%2F05%2F23%2F%E6%AF%8F%E5%A4%A9%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%B9%A0%E6%96%B0%E4%B8%9C%E8%A5%BF-warriosjs%2F</url>
    <content type="text"><![CDATA[每天十分钟学习新东西系列文章仓库地址 github warriorjs 一个令人兴奋的编程和人工智能游戏 官网 github 快速开始１.npm 安装 WarriorJS 1npm install --global @warriorjs/cli 2.启动游戏 1warriorjs 3.给你的战士起名字 4.查看Readme文件里面有第一级(first level)说明 5.开始玩吧 官方文档支持中文233~~~]]></content>
  </entry>
  <entry>
    <title><![CDATA[模仿san的hover动画]]></title>
    <url>%2F2018%2F05%2F19%2F%E6%A8%A1%E4%BB%BFsan%E7%9A%84hover%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[在百度前端技术学院学习 设计师学院 绿(大佬)的课程 (第一课QAQ) 传送门 然后模仿san官网的动画效果 san 这是我模仿的效果 传送们 pc端食用更佳！ 大佬的实现已经很棒了 个人只让部分动画变得平滑 比如说鼠标移出的时候增加了 1transition: transform .3s; 这样可以让鼠标移出Div的时候更加平滑 分界线～～～ 首先贴出资料和大佬的教程 http://ife.baidu.com/course/detail/id/18 https://zhuanlan.zhihu.com/uxelement https://baidu.github.io/san/ https://github.com/airbnb/lottie-web https://codepen.io/airnan/project/editor/ZeNONO/ https://www.youtube.com/watch?v=5XMUJdjI0L8 …… 大概就是这么写 大家可以去Google搜教程 官方案例很不错 首先布局 结构和样式都可以借鉴san官网 利用控制台(so easy~) 12345678910111213141516&lt;div class="resource-block"&gt; &lt;a href="" class="resource-item"&gt; &lt;div class="resource-item-top resource-item-top-two"&gt; &lt;div id="bm" class="bodymovin" data-movpath="js/compass.json"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="resource-item-bottom"&gt; &lt;h5&gt;教程&lt;/h5&gt; &lt;p&gt;教程是入门的捷径，请从这里开始了解San&lt;/p&gt; &lt;/div&gt; &lt;/a&gt;&lt;/div&gt; 这是结构 具体样式可以查看我的github文件 传送门 然后就是js 控制动画效果了 引入jquery (方便～) 在github上的build/player获取最新版本的lottie.js文件 或者 从AE的插件导出 在HTML引入文件 1&lt;script src="js/lottie.js"&gt;&lt;/script&gt; 调用lottie.loadAnimation()启动一个动画。将一个对象作为参数 12345678910111213141516var animData = &#123; container: bodymovinLayer, renderer: 'svg', prerender: true, loop: false, autoplay: false, path: bodymovinLayer.getAttribute('data-movpath')&#125;# animData 导出的动画数据的Object# container 渲染动画的dom元素# renderer 'svg'/'canvas'/'html'来设置渲染器# prerender 这个根据英文应该是预渲染# loop 是否循环播放# autoplay 是否自动播放# path 路径 while循环绑定事件 将上面封装进一个方法 123456789101112131415161718192021222324252627282930setBodymovin = function (cards, len) &#123; while (len--) &#123; var bodymovinLayer = cards[len].getElementsByClassName('bodymovin')[0] var animData = &#123; container: bodymovinLayer, renderer: 'svg', prerender: true, loop: false, autoplay: false, path: bodymovinLayer.getAttribute('data-movpath') &#125; anim = lottie.loadAnimation(animData); (function (anim) &#123; var card = cards[len] $(card).on('mouseenter', function () &#123; anim.play() &#125;) $(card).on('mouseleave', function (e) &#123; anim.stop() &#125;) &#125;)(anim) &#125;&#125; 最后获取元素调用1234567var resourceCards = document.querySelectorAll('.resource-block')var facilityCards = document.querySelectorAll('.facility-block')var len = resourceCards.lengthsetBodymovin(resourceCards, len)setBodymovin(facilityCards, len) 最后贴 gulp 任务 123456789101112131415161718192021222324252627const gulp = require('gulp')const connect = require('gulp-connect')gulp.task('connect', function()&#123; connect.server(&#123; root: 'app', port: 8000, livereload: true &#125;)&#125;)gulp.task('html', function()&#123; gulp.src('./app/*.html') .pipe(connect.reload())&#125;)gulp.task('css', function()&#123; gulp.src('./app/css/*.css') .pipe(connect.reload())&#125;)gulp.task('watch', function () &#123; gulp.watch(['./app/*.html'], ['html']) gulp.watch(['./app/css/*.css'], ['css'])&#125;)gulp.task('default', ['connect','watch']) 具体代码见github源码 大佬多给给意见哦～～～ Qq： 952822399]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据结构与算法JavaScript描述二]]></title>
    <url>%2F2018%2F05%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95JavaScript%E6%8F%8F%E8%BF%B0%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[(为神马这里只有二没有一？？？ 因为第一章我没有做笔记阿hhhh) 可以看github也是一样的 笔记主要都在github上面 传送门 第二章扩展JavaScript数组对象 JavaScript: The Good Parts 参数： 数组的行数，列数和初始值 1234567891011Array.matrix = function(numrows, numcols, initial)&#123; var arr =[] for(var i = 0;i&lt; numrows; ++i)&#123; var colums = [] for(var j = 0;j&lt;numcols;++j)&#123; colums[j] = initial &#125; arr[i] = colums &#125; return arr&#125; 1var nums = Array.matrix(5,5,0) // 练习 1.创建一个记录学生成绩的对象，提供一个添加成绩的方法，以及一个现实学生平均成绩的方法。 查看练习 123456789101112131415161718192021222324252627function StudentResult()&#123; this.studentData = [] this.addResult = addResult this.showAverage = showAverage&#125;function addResult(result)&#123; this.studentData.push(result)&#125;function showAverage ()&#123; var total = 0 for(var i = 0, len = this.studentData.length; i &lt; len; ++i )&#123; total += this.studentData[i] &#125; return ( total / this.studentData.length ) || 0&#125;var thisStudent = new StudentResult()console.log(thisStudent.showAverage())thisStudent.addResult(90)thisStudent.addResult(88)console.log(thisStudent.showAverage()) 2.将一组单词存在一个数组中，并按照正序和倒序分别现实这些单词。 查看练习 1234567891011121314151617181920var wordArr = [ 'hello', 'world', 'apple', 'pig', 'data', 'week', 'student']var ascendingOrder = wordArr.sort()console.log(ascendingOrder)var dscendingOrder = wordArr.sort().reverse()// var dscendingOrder = ascendingOrder.reverse()console.log(dscendingOrder) 3.修改本章前面出现过的weeklyTemps对象,使它可以使用一个二维数组来存储每月的有用数据。增加一些方法用以现实平均月树、具体某一周平均数和所有周的平均数。 查看练习 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990Array.martix = function (numrows, numcols, initial)&#123; var arr = [] for(var i = 0;i&lt;numrows;++i)&#123; var colums = [] for(var j = 0; j&lt; numcols;++j)&#123; colums[j] = initial &#125; arr[i] = colums &#125; return arr&#125;function weekTemps()&#123; this.dataStore = [] this.addResult = addResult this.oneAverage = oneAverage this.allAverage = allAverage this.monthAverage = monthAverage&#125;function addResult(week, day, data)&#123; this.dataStore[week][day] = data&#125;function average()&#123; var total = 0 for(var i = 0;i&lt;this.dataStore.length;++i)&#123; total += this.dataStore[i] &#125; return total / this.dataStore.length&#125;function monthAverage()&#123; var total = 0 for(var i = 0;i&lt;this.dataStore.length;++i)&#123; for(var j = 0;j&lt;this.dataStore[i].length;++j)&#123; total += this.dataStore[i][j] &#125; total = parseInt(total / this.dataStore[i].length) &#125; return total&#125;// week 1 - 4function oneAverage(week)&#123; var total = 0 var oneWeek = week - 1 for(var i = 0;i&lt;this.dataStore[oneWeek].length;++i)&#123; total += this.dataStore[oneWeek][i] &#125; return parseInt(total / this.dataStore[oneWeek].length)&#125;function allAverage(week)&#123; var total = 0 var totalAverage = 0 var weekAverager = [] for(var i = 0;i&lt;this.dataStore.length;++i)&#123; for(var j = 0;j&lt;this.dataStore[i].length;++j)&#123; total += this.dataStore[i][j] &#125; totalAverage = total / this.dataStore[i].length weekAverager.push(parseInt(totalAverage)) total = 0 totalAverage = 0 &#125; return weekAverager&#125;var thisWeek = new weekTemps()// 初始化数组数据thisWeek.dataStore = Array.martix(4,7,0)thisWeek.addResult(1,1,280)thisWeek.addResult(2,1,280)thisWeek.addResult(3,1,280)console.log(thisWeek.monthAverage() + ' 月')console.log(thisWeek.oneAverage(2) + ' 指定周')console.log(thisWeek.allAverage() + ' 所有周')console.log(thisWeek.dataStore + ' 所有数据')console.log(thisWeek.dataStore) 4.创建这样的一个对象，他将字母存储在一个数组中，并且用一个方法可以将字母连在一起，显示成一个单词。 123456789101112131415161718192021function Word()&#123; this.words = [] this.addWord = addWord this.showWord = showWord&#125;function addWord(word)&#123; this.words.push(word)&#125;function showWord ()&#123; return this.words.join('')&#125;var word = new Word()word.addWord('a')word.addWord('p')word.addWord('p')console.log( word.showWord() ) 个人觉得这个题目有更高级的解法 比如说根据增加的字母判断是否是一个合理的单词 并且输出单词的结果 Google到一些思路 大家可以看看 然后教我阿 hhhhhh 2333～ 我叫思路 大佬可以私我 给我思路哇2333～ Qq： 952822399]]></content>
  </entry>
  <entry>
    <title><![CDATA[lolSix周年活动页面]]></title>
    <url>%2F2018%2F03%2F19%2FlolSix%E5%91%A8%E5%B9%B4%E6%B4%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[前言小白文采不好,大佬们看见了多多指点,自己的代码可能也有很多”毒瘤”希望大佬们指正,蟹蟹~~ 在掘金看到了一个大佬发的 LOL六周年里的按钮动画 的文章 效果非常 very nice 也很有意思 于是进 lolSix周年活动页面 看看效果 只剩下哇塞!哇塞!哇塞! 于是自己决定试试,参考首页写一部分效果,于是… 有图有真相 ps: demo demo仓库 如果觉得不错的话,可以给个star鼓励一下 蟹蟹~~ 两个动画都是通过改变class来完成的效果,简单粗暴 赞~(≧▽≦)/~\ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162(function () &#123; // 定义所需要的变量 let navBtns = $('#nav-ul i') let navBtnli = $('#nav-ul li') let navhs = $('#nav li') let navhem = $('#nav em') // 两个改变class的计数变量 let numLi = &#123; numi: 1, numh: 1 &#125; // 清楚定时器的变量 let time = null // 鼠标经过和移除 触发run方法 navBtnli.on('mouseover', function () &#123; let navI = $(this).children('i') run(navI, 'ans2_btn', numLi.numi) &#125;) navBtnli.on('mouseout', function () &#123; let target = $(this).children('i') stop(target) &#125;) navhs.on('mouseover', function () &#123; $(this).removeClass('ligb') let navh = $(this).children('em') run(navh, 'ans_btn', numLi.numh) &#125;) navhs.on('mouseout', function () &#123; let target = $(this).children('em') stop(target) $(this).addClass('ligb') &#125;) // 接受三个参数, 需要改变的对象, 需要改变的名字, 需要改变的数 function run(obj, name, num) &#123; // js定时器setTimeout 无法调用局部变量的解决办法 function runs() &#123; if (num &gt; 25) &#123; num = 1 &#125; obj.css('display', 'block') obj.removeClass() obj.addClass(nameNav + num) num++ time = setTimeout(function () &#123; clearTimeout(time) runs() &#125;, 30) &#125; runs() &#125; // 停止动画 function stop(target) &#123; clearTimeout(time) target.css('display', 'none') &#125;&#125;)() html结构请参考 官方页面或者我的仓库里面的html文件 然后就是中间的 flash 动画,使用了html object标签, 但是我在Ubuntu上面chrome测试的时候正常没有问题,(自己在Ubuntu开虚拟机上win测试,IE11,360有效果,chrome,firefox就没有了,懵逼 希望有大佬可以跟我提点一二) 但是在Firefox测试的时候不会显示, 于是用了兼容的处理方法,先贴一个通用的处理方法(自己也研究了一会儿,第一次接触2333~~), 1234567891011121314151617181920// 这是活动页面的解决办法// 大家也可以看看这个文档 https://github.com/swfobject/swfobject // An open source Javascript framework for detecting the Adobe Flash Player plugin and embedding Flash (swf) files.// 自己英文比较垃圾 chrome 翻译过来就是// 用于检测Adobe Flash Player插件并嵌入Flash（swf）文件的开源Javascript框架。// 这个文件可以引用腾讯的,也可以下载,也可以新建文件复制粘贴&lt;script src="./public/js/swfobject.js"&gt;&lt;/script&gt;&lt;script src="index.swf"&gt;&lt;/script&gt;&lt;script&gt; var params = &#123; scale: "noscale", wmode: "transparent", align: "middle", allowFullscreen: "true", allowScriptAccess: "always", FlashVars: "timer=1480586966506&amp;endtimer=1481094000000" &#125; swfobject.embedSWF("index.swf", "mymovie", "100%", "670", "8.0.0","expressInstall.swf", null, params);&lt;/script&gt; 虽然解决了引入swf动画的兼容问题,但是在firefox上面根本不显示啊 23333~~~ 大佬的解决办法非常简单 请继续细心观看文章! 1234567891011121314// 提前在html结构上面写一个静态的替代图片,然后隐藏&lt;div class="logob"&gt;英雄联盟6周年盛典&lt;/div&gt;// 这里是swf文件的位置&lt;div id="mymovie" class="mymovie"&gt;&lt;/div&gt;// 通过判断 来显示静态图片(虽然没有了swf动画,但是总不不显示比较好 赞 学习了~!) setTimeout(function () &#123; if ($(".mymovie").length &gt; 0) &#123; $(".logob").css(&#123; "display": "block" &#125;); &#125;&#125;, 1000) 大概就是跌么多了! 如果有不对的地方希望大佬们多多指正, 也可以加小白我交流2333~~ Qq: 952822399 自己大二也快要毕业了QAQ,希望被大佬们带走!!!]]></content>
  </entry>
  <entry>
    <title><![CDATA[情人节学写html5微信游戏]]></title>
    <url>%2F2018%2F02%2F14%2F%E6%83%85%E4%BA%BA%E8%8A%82%E5%AD%A6%E5%86%99html5%E5%BE%AE%E4%BF%A1%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[情人节都在干什么？？？ 当然是写代码！！！ 看某书正好以一个html5微信游戏，很适合今天的日子 附上demo：demo 请在手机上查看，pc端请切换手机调试模式，目前没弄完后续完善(图片也懒得弄了，要过年了，懒～) 布局和样式就忽略了，详情可以参考代码或者去我的github查看 动画效果用到了 TweenMax 这个可是个大宝贝儿～ 取一段效果来说明吧 12345678910111213141516171819202122232425262728293031function showScene1() &#123; TweenMax.to(heart, 1, &#123; opacity: 1 &#125;) TweenMax.to(heart, .5, &#123; scaleX: 1.2, scaleY: 1.2, repeat: -1, yoyo: true &#125;) TweenMax.to(t0, 1, &#123; top: "40%", opacity: 1, delay: .3 &#125;) TweenMax.to(t1, 1, &#123; top: "57%", opacity: 1, delay: .5 &#125;) TweenMax.to(t2, 1, &#123; top: "65%", opacity: 1, delay: 1 &#125;) TweenMax.to(sbtn, 1, &#123; top: "75%", opacity: 1, delay: 1.4 &#125;)&#125; 这是其中一个动画效果说说他的参数 （target,duration,vars） ——我是翻译线—– (目标，动画的时间长度（单位：秒），包含多种属性的对象、透明度、位置、延时啥啥啥的具体参考官方api) 我们右上角有一个音乐播放的控制，默认是不播放的 12345678910musicoff.onclick = function () &#123; musicon.className = musicon.className ? "" : "hidden" musicoff.className = musicoff.className ? "" : 'hidden' music.play()&#125;musicon.onclick = function () &#123; musicon.className = musicon.className ? "" : "hidden" musicoff.className = musicoff.className ? "" : 'hidden' music.pause()&#125; 重点是 play() 和 pause() 来控制播放和停止 其余的是来切换类达到视觉效果 制作logo坐标点，书籍是采用flash制作然后转换为坐标点，获取然后复制出来 1let p = [[152,139],[160,115],[160,140],[160,166],[160,192],[160,218],[160,243],[160,269],[160,295],[123,160],[94,181],[112,167],[110,149],[133,152],[160,126],[160,152],[160,178],[160,204],[160,229],[160,255],[160,283],[143,145],[103,174],[110,160],[168,139],[198,160],[227,182],[208,167],[211,149],[188,153],[178,146],[217,174],[210,160],[152,166],[123,187],[94,209],[112,194],[133,180],[143,173],[103,201],[168,167],[198,188],[227,209],[208,195],[188,180],[178,173],[217,202],[152,194],[123,215],[94,237],[112,222],[133,208],[143,201],[103,229],[168,195],[198,216],[227,237],[208,223],[188,208],[178,201],[217,230],[152,221],[123,242],[94,264],[112,249],[133,235],[143,228],[103,256],[168,222],[198,243],[227,264],[208,250],[188,235],[178,228],[217,257],[152,250],[123,271],[112,278],[133,264],[143,257],[103,285],[168,251],[198,272],[208,279],[188,264],[178,257],[217,286],[110,203],[110,234],[211,204],[210,235],[110,213],[110,244],[211,214],[210,245],[128,97],[116,102],[103,109],[91,116],[81,125],[72,134],[65,146],[58,156],[52,169],[48,181],[45,194],[43,208],[43,220],[45,234],[49,246],[53,259],[60,271],[68,281],[76,292],[86,301],[98,310],[110,317],[125,322],[137,326],[151,326],[165,326],[178,326],[191,322],[205,318],[219,312],[231,304],[241,295],[251,285],[259,274],[266,261],[271,249],[274,237],[277,223],[277,209],[276,196],[273,184],[270,171],[264,160],[258,148],[251,137],[241,127],[231,118],[142,94],[154,94],[166,94],[179,94],[191,98],[204,102],[217,109]]; 我是坐标点，恐怖吧！！！这个数据是用过for循环弄出来的。 123for(var i = 0; i &lt; a.numChildren;i++)&#123; trace("["+Math.floor(a.getChildAt(i).x)+ "," + Math.floor(a.getChildAt(i).y) +"],")&#125; 然后用户每触摸一次生成相应的圆点 1234567891011121314151617181920212223242526272829303132333435363738394041424344function getPosition(ev) &#123; if (drawMode) &#123; //只有在绘图模式下才开始绘制圆点 ev = ev || window.event ev.preventDefault() //为了使图案在水平方向上居中，计算出当前屏幕宽度与设计宽度（320像素）之间的差异值，以作为后续的位移基准值 let xbias = (window.innerWidth - 320) / 2 let touch = ev.touches[0] //获取第一个触点的信息 let point = &#123; x: 0, y: 0 &#125; //创建一个对象来储存触点坐标 point.x = Number(touch.pageX) //记录触点X坐标 point.y = Number(touch.pageY) //记录触点Y坐标 if (mi &lt; pl) &#123; let objdiv = document.createElement('div') let objname = 's_' + mi //设置name属性 objdiv.id = objname objdiv.style.position = 'absolute' objdiv.style.display = 'block' objdiv.style.top = point.y + 'px' objdiv.style.left = point.x + 'px' objdiv.style.background = '#fff' objdiv.style.borderRadius = '50%' objdiv.style.width = '12px' objdiv.style.height = '12px' objdiv.style.zIndex = mi objdiv.innerHTML = ' ' scene2.appendChild(objdiv) TweenMax.to(objdiv, 1, &#123; top: p[mi][1], left: p[mi][0] + xbias &#125;) //创建从触摸点到目标坐标点的位移动画 mi++ &#125; else &#123; drawMode = false //圆点全部显示完毕后，关闭绘图模式 TweenMax.to(lbtn, .8, &#123; opacity: 1, top: '80%' &#125;) //显示结束按钮 &#125; &#125; return false&#125; 这是生成logo圆点的关键方法！！！剩下还有最后一个动画，效果可以参考代码. —最后— 大家今天都是怎么过得？？？！！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[刮一刮游戏]]></title>
    <url>%2F2018%2F02%2F04%2F%E5%88%AE%E4%B8%80%E5%88%AE%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[话不多说,附上 demo (记得切换手机预览,刮一刮) 下面是效果图 布局样式很简单,就没截图贴出来,发一个比较关键的style样式 1234567#guajiang &#123; width: 240px; height: 65px; background: url(./img/result.png) no-repeat center; background-size: cover; margin: 0 auto;&#125; 然后通过js给结果添加一层颜色,这样让用户看不见,只有在刮的时候才能看见奖项 let 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。let允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与var关键字不同的是，它声明的变量只能是全局或者整个函数块的。–JavaScript | MDN (妈个鸡,就是声明变量,废话真多) 1234let canvas = document.getElementById('mask')let context = canvas.getContext('2d')context.fillStyle = '#d1d1d1' // 设置填充浅灰色context.fillRect(0, 0, 240, 65) // 填充改颜色,覆盖下方背景图片 我们需要让用户手指在刮奖区域移动时候刮掉相应的区域,运用Canvas中globalCompositeOperation属性设置为destination-out,在已经填充颜色的时候再次绘制时,然后绘制的区域就会变得透明 1context.globalCompositeOperation = 'destination-out' (简单解释就是,手指移到哪里,哪里就透明so easy) 接下来为画布创建touchmove事件,在画布上面移动时执行方法,绘制相应的圆形,圆形和之前的填充色相互消减,从而擦处灰色图层 1234567891011canvas.addEventListener(&apos;touchmove&apos;, function (event) &#123; // 手指在画布上移动时 event.preventDefault() // 去除默认的响应行为 let touch = event.touches[0] // 获取触摸的第一个点 context.beginPath() // 开始路径绘制 // 所在触摸处绘制圆形 半径20px context.arc(touch.pageX - canvas.offsetLeft, touch.pageY - canvas.offsetTop, 20, 0, Math.PI * 2) context.closePath() // 结束路径绘制 context.fillStyle = &apos;#BDC3C7&apos; // 选择任意颜色 context.fill() // 填充颜色&#125;) 触摸点PageX,PageY属性返回的是整个页面的全局坐标,所以需要减去画布的x,y坐标 canvas的arc 12345678context.arc(x,y,r,sAngle,eAngle,counterclockwise)参数 描述x 圆的中心的 x 坐标。y 圆的中心的 y 坐标。r 圆的半径。sAngle 起始角，以弧度计。（弧的圆形的三点钟位置是 0 度）。eAngle 结束角，以弧度计。counterclockwise 可选。规定应该逆时针还是顺时针绘图。False = 顺时针，true = 逆时针。 然后需要判断是否刮完,继续在方法里面继续撸 1234567891011121314let imgData = context.getImageData(0,0,240,65) // 获取画布中的所有像素let pixelsArr = imgData.data // 得到像素字节数据let loop = pixelsArr.length // 获取数据的长度let transparent = 0 // 设置一个变量来记录变为透明度像素点数量for (let i = 0; i &lt; loop; i+=4 ) &#123; // 遍历循环每一个像素 let alpha = pixelsArr[i + 3] // 获取遍历每一个像素的透明值 if(alpha &lt; 10)&#123; // 当透明度小于10时 认为已被擦除 transparent++ &#125;&#125;let percentage = transparent / (loop / 4) // 计算透明像素所有像素中所占比例if(percentage &gt; .9)&#123; // 比例大于90% document.getElementById('status').innerHTML = '刮奖结束!' // 显示刮奖结束字样&#125; 页面大面积,百分之九十被擦除的时候显示刮奖结束的字样 小案例来自《某书籍》,自己看的pdf的,需要的小伙伴私我吧,点我的账号私信也可以QQ:952822399 ,蟹蟹~~~]]></content>
  </entry>
  <entry>
    <title><![CDATA[案例练习第一课]]></title>
    <url>%2F2018%2F01%2F31%2F%E6%A1%88%E4%BE%8B%E7%BB%83%E4%B9%A0%E7%AC%AC%E4%B8%80%E8%AF%BE%2F</url>
    <content type="text"><![CDATA[最近放假闲来无事, 打开了这个实例索引,开始了第一个练习(巩固自己的垃圾基础2333~~). 附上demo地址: 我是demo1 我是demo2 我是案例demo 写的不好请多指教~ 在demo1 和 demo2 的效果的效果是一样的,但是和案例demo增加了动画效果,实现过程很简单 12-webkit-transition: all .5s;transition: all .5s; 加上css3 的 transition 从而产生过渡效果,看起来比较自然(小把戏emmm~) 现在说说demo1 和 demo2 的区别 首先看一下for循环 输出 0 1 2 3 (当然是啊都说些废话~打嘴) 下面给点样式加点js 单击怎么输出了四个4 按道理不是输出 0 1 2 3 吗 怎么输出了数目 (这是一个错误的设置事件处理程序) 下面我们改进改进 这下o jier k 了 没问题了, 正确的输出了我们单击的序号 这个问题就是通过闭包来解决的,嘿嘿嘿~~~(对闭包理解还不是很透彻) ps: 避免在循环中创建函数, 可能会带来无所谓的计算还会引起混淆,在循环外面创建一个辅助函数,让这个辅助的函数绑定一个当前i函数这样就不会导致混淆了.之前的例子绑定了i变量本身,而不是函数在构造时候的变量i的值 (引用某书的话) 下面开始说区别 这里的 i 和 this.index 都正确输出了0 1 2 3 4 因为他有五个input(哎╮(╯▽╰)╭ 又是废话) 案例把 i值 赋值给了 oBtn[i].index 控制台打印可以正确的输出0 1 2 3 4(我自己的个人理解,如果不对 大佬们多指正) 我的做法是是向之前那样写一个辅助函数 ok 大工告成, 完工休息, 文字不够图片来凑23333~~ dalao们多指教.]]></content>
  </entry>
  <entry>
    <title><![CDATA[github+hexo搭建博客]]></title>
    <url>%2F2018%2F01%2F27%2Fgithub-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[小白开始写博客2333~~(大佬不要喷),最终选择了github+hexo(穷!),下面就分享一下怎么用github+hexo搭建一个博客,网上已经有不少大佬写了教程我自己也参考了不少(虽然官网已经写得很全了),下面就开工干活. 第一步1$ npm install hexo-cli -g 需要nodejs环境(这个就不多说了,大家都懂不懂的可以baidu or google) 第二步123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install Hexo 将会在指定文件夹中新建所需要的文件( Doc ) 第三步12345$ hexo server (启动服务 默认4000端口)or$ hexo s (这样好像ok)or$ hexo server -p 5000 (自定义端口) 命令以启动服务器，您的网站会在 http://localhost:4000 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。( Doc ) 第四步123$ hexo generateor$ hexo g (这样好像ok) 生成文件,使用 Hexo 生成静态文件快速而且简单。( Doc ) 第五步在你的github账户New一个Repositories(如果没github的老哥可以注册一个 Github ),会有像下面一样的英文(跟白说一样),开始自己是直接通过git命令push到仓库,结果不行出现一个警告(太蠢了).然后换了方法.仓库名必须是你的githubName加上github.io作为后缀 比如: xiaotiandada.github.io !!! 123456echo "# xiaotiandada.github.io" &gt;&gt; README.mdgit initgit add README.mdgit commit -m "first commit"git remote add origin https://github.com/xiaotiandada/xiaotiandada.github.io.gitgit push -u origin master 第六步将你的Github与Hexo结合起来,第一次需要设置Git的UserName和UserEmail 12$ git config --global user.name "yourName"$ git config --global user.email your@email.com 详细可以参考这个博客或者自行百度搜索方法( Doc ) 第七步万事俱备 只欠部署,在部署前需要安装 hexo-deployer-git.(因为部署在github),详情看( Doc ) 1$ npm install hexo-deployer-git --save 配置_config.yml文件,下面是我自己的配置信息 1234deploy: type: git repo: git@github.com:xiaotiandada/xiaotiandada.github.io.git branch: master 第八步1$ hexo deploy Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。 第九步打开Github仓库 找到xiaotiandada.github.io 这个仓库点击settings滑动到 GitHub Pages 有一个连接(绿色勾勾 : Your site is published at https://xiaotiandada.github.io/ ) 就可以预览你的博客 第十步默认主题太丑改主题, 找到喜欢的主题 ( 知呼Hexo主题连接 ) 自己默认选择了第一个 Next 12$ cd themes (你的主题文件夹)$ git clone --branch v5.1.2 https://github.com/iissnan/hexo-theme-next themes/next (下载Next主题) 打开配置_config.yml文件,下面是我自己的配置信息 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next (你的主题名字) 最后就没事了,可以重复第四步和第八步. 大功告成 如果有错字的地方欢迎’举报我’ 我的 Qq:952822399 然后就可以预览我的博客( 小田的博客地址 )]]></content>
  </entry>
</search>
